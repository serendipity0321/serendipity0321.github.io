<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>跨域方式实现原理</title>
    <link href="/2023/01/27/%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2023/01/27/%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="九种跨域方式实现原理"><a href="#九种跨域方式实现原理" class="headerlink" title="九种跨域方式实现原理"></a>九种跨域方式实现原理</h1><p>前后端数据交互经常会碰到请求跨域，什么是跨域，以及有哪几种跨域方式，这是本文要探讨的内容。</p><p><strong>本文完整的源代码请猛戳<a href="https://link.juejin.cn/?target=https://github.com/ljianshu/Blog">github博客</a>，纸上得来终觉浅，建议大家动手敲敲代码。</strong></p><h2 id="一、什么是跨域？"><a href="#一、什么是跨域？" class="headerlink" title="一、什么是跨域？"></a>一、什么是跨域？</h2><h3 id="1-什么是同源策略及其限制内容？"><a href="#1-什么是同源策略及其限制内容？" class="headerlink" title="1.什么是同源策略及其限制内容？"></a>1.什么是同源策略及其限制内容？</h3><p>同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p><img src="/../imgs/%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/1638b3579d9eeb32tplv-t2oaga2asx-zoom-in-crop-mark4536000.webp" alt="url的组成"></p><p><strong>同源策略限制内容有：</strong></p><ul><li>Cookie、LocalStorage、IndexedDB 等存储性内容</li><li>DOM 节点</li><li>AJAX 请求发送后，结果被浏览器拦截了</li></ul><p>但是有三个标签是允许跨域加载资源：</p><ul><li><code>&lt;img src=XXX&gt;</code></li><li><code>&lt;link href=XXX&gt;</code></li><li><code>&lt;script src=XXX&gt;</code></li></ul><h3 id="2-常见跨域场景"><a href="#2-常见跨域场景" class="headerlink" title="2.常见跨域场景"></a>2.常见跨域场景</h3><p><strong>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域</strong>。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：</p><p><img src="/../imgs/%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/1638b3579dde630etplv-t2oaga2asx-zoom-in-crop-mark4536000.webp" alt="img"></p><p>特别说明两点：</p><p><strong>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。</strong></p><p><strong>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”</strong>。</p><p>这里你或许有个疑问：<strong>请求跨域了，那么请求到底发出去没有？</strong></p><p><strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了</strong>。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p><h2 id="二、跨域解决方案"><a href="#二、跨域解决方案" class="headerlink" title="二、跨域解决方案"></a>二、跨域解决方案</h2><h3 id="1-jsonp"><a href="#1-jsonp" class="headerlink" title="1.jsonp"></a>1.jsonp</h3><h4 id="1-JSONP原理"><a href="#1-JSONP原理" class="headerlink" title="1) JSONP原理"></a>1) JSONP原理</h4><p><strong>利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。</strong></p><h4 id="2-JSONP和AJAX对比"><a href="#2-JSONP和AJAX对比" class="headerlink" title="2) JSONP和AJAX对比"></a>2) JSONP和AJAX对比</h4><p>JSONP和AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但AJAX属于同源策略，JSONP属于非同源策略（跨域请求）</p><h4 id="3-JSONP优缺点"><a href="#3-JSONP优缺点" class="headerlink" title="3) JSONP优缺点"></a>3) JSONP优缺点</h4><p>JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。<strong>缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。</strong></p><h4 id="4-JSONP的实现流程"><a href="#4-JSONP的实现流程" class="headerlink" title="4) JSONP的实现流程"></a>4) JSONP的实现流程</h4><ul><li>声明一个回调函数，其函数名(如show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的data)。</li><li>创建一个<code>&lt;script&gt;</code>标签，把那个跨域的API数据接口地址，赋值给script的src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback&#x3D;show）。</li><li>服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是show，它准备好的数据是<code>show(&#39;我不爱你&#39;)</code>。</li><li>最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。</li></ul><p>在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.html</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">jsonp</span>(<span class="hljs-params">&#123; url, params, callback &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>    <span class="hljs-variable language_">window</span>[callback] = <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>      <span class="hljs-title function_">resolve</span>(data)<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(script)<br>    &#125;<br>    params = &#123; ...params, callback &#125; <span class="hljs-comment">// wd=b&amp;callback=show</span><br>    <span class="hljs-keyword">let</span> arrs = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> params) &#123;<br>      arrs.<span class="hljs-title function_">push</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;params[key]&#125;</span>`</span>)<br>    &#125;<br>    script.<span class="hljs-property">src</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;url&#125;</span>?<span class="hljs-subst">$&#123;arrs.join(<span class="hljs-string">&#x27;&amp;&#x27;</span>)&#125;</span>`</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(script)<br>  &#125;)<br>&#125;<br><span class="hljs-title function_">jsonp</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:3000/say&#x27;</span>,<br>  <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">wd</span>: <span class="hljs-string">&#x27;Iloveyou&#x27;</span> &#125;,<br>  <span class="hljs-attr">callback</span>: <span class="hljs-string">&#x27;show&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125;)<br>复制代码<br></code></pre></td></tr></table></figure><p>上面这段代码相当于向<code>http://localhost:3000/say?wd=Iloveyou&amp;callback=show</code>这个地址请求数据，然后后台返回<code>show(&#39;我不爱你&#39;)</code>，最后会运行show()这个函数，打印出’我不爱你’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// server.js</span><br><span class="hljs-keyword">let</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">let</span> app = <span class="hljs-title function_">express</span>()<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/say&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">let</span> &#123; wd, callback &#125; = req.<span class="hljs-property">query</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(wd) <span class="hljs-comment">// Iloveyou</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(callback) <span class="hljs-comment">// show</span><br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;callback&#125;</span>(&#x27;我不爱你&#x27;)`</span>)<br>&#125;)<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>)<br>复制代码<br></code></pre></td></tr></table></figure><h4 id="5-jQuery的jsonp形式"><a href="#5-jQuery的jsonp形式" class="headerlink" title="5) jQuery的jsonp形式"></a>5) jQuery的jsonp形式</h4><p><strong>JSONP都是GET和异步请求的，不存在其他的请求方式和同步请求，且jQuery默认就会给JSONP的请求清除缓存。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://crossdomain.com/jsonServerResponse&quot;</span>,<br><span class="hljs-attr">dataType</span>:<span class="hljs-string">&quot;jsonp&quot;</span>,<br><span class="hljs-attr">type</span>:<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-comment">//可以省略</span><br><span class="hljs-attr">jsonpCallback</span>:<span class="hljs-string">&quot;show&quot;</span>,<span class="hljs-comment">//-&gt;自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略</span><br><span class="hljs-attr">jsonp</span>:<span class="hljs-string">&quot;callback&quot;</span>,<span class="hljs-comment">//-&gt;把传递函数名的那个形参callback，可省略</span><br><span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);&#125;<br>&#125;);<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="2-cors"><a href="#2-cors" class="headerlink" title="2.cors"></a>2.cors</h3><p><strong>CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现</strong>。</p><p>浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。</p><p>服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p><p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为<strong>简单请求</strong>和<strong>复杂请求</strong>。</p><h4 id="1-简单请求"><a href="#1-简单请求" class="headerlink" title="1) 简单请求"></a>1) 简单请求</h4><p>只要同时满足以下两大条件，就属于简单请求</p><p>条件1：使用下列方法之一：</p><ul><li>GET</li><li>HEAD</li><li>POST</li></ul><p>条件2：Content-Type 的值仅限于下列三者之一：</p><ul><li>text&#x2F;plain</li><li>multipart&#x2F;form-data</li><li>application&#x2F;x-www-form-urlencoded</li></ul><p>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</p><h4 id="2-复杂请求"><a href="#2-复杂请求" class="headerlink" title="2) 复杂请求"></a>2) 复杂请求</h4><p>不符合以上条件的请求就肯定是复杂请求了。 复杂请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。</p><p>我们用<code>PUT</code>向后台请求时，属于复杂请求，后台需做如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 允许哪个方法访问我</span><br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;PUT&#x27;</span>)<br><span class="hljs-comment">// 预检的存活时间</span><br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Max-Age&#x27;</span>, <span class="hljs-number">6</span>)<br><span class="hljs-comment">// OPTIONS请求不做任何处理</span><br><span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br>  res.<span class="hljs-title function_">end</span>() <br>&#125;<br><span class="hljs-comment">// 定义后台返回的内容</span><br>app.<span class="hljs-title function_">put</span>(<span class="hljs-string">&#x27;/getData&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">headers</span>)<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;我不爱你&#x27;</span>)<br>&#125;)<br>复制代码<br></code></pre></td></tr></table></figure><p>接下来我们看下一个完整复杂请求的例子，并且介绍下CORS请求相关的字段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.html</span><br><span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">&#x27;name=xiamen&#x27;</span> <span class="hljs-comment">// cookie不能跨域</span><br>xhr.<span class="hljs-property">withCredentials</span> = <span class="hljs-literal">true</span> <span class="hljs-comment">// 前端设置是否带cookie</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;PUT&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:4000/getData&#x27;</span>, <span class="hljs-literal">true</span>)<br>xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;xiamen&#x27;</span>)<br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>    <span class="hljs-keyword">if</span> ((xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) || xhr.<span class="hljs-property">status</span> === <span class="hljs-number">304</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">response</span>)<br>      <span class="hljs-comment">//得到响应头，后台需设置Access-Control-Expose-Headers</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-title function_">getResponseHeader</span>(<span class="hljs-string">&#x27;name&#x27;</span>))<br>    &#125;<br>  &#125;<br>&#125;<br>xhr.<span class="hljs-title function_">send</span>()<br>复制代码<br><span class="hljs-comment">//server1.js</span><br><span class="hljs-keyword">let</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">let</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(__dirname));<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>复制代码<br><span class="hljs-comment">//server2.js</span><br><span class="hljs-keyword">let</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">let</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-keyword">let</span> whitList = [<span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>] <span class="hljs-comment">//设置白名单</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-keyword">let</span> origin = req.<span class="hljs-property">headers</span>.<span class="hljs-property">origin</span><br>  <span class="hljs-keyword">if</span> (whitList.<span class="hljs-title function_">includes</span>(origin)) &#123;<br>    <span class="hljs-comment">// 设置哪个源可以访问我</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, origin)<br>    <span class="hljs-comment">// 允许携带哪个头访问我</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>)<br>    <span class="hljs-comment">// 允许哪个方法访问我</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;PUT&#x27;</span>)<br>    <span class="hljs-comment">// 允许携带cookie</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="hljs-literal">true</span>)<br>    <span class="hljs-comment">// 预检的存活时间</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Max-Age&#x27;</span>, <span class="hljs-number">6</span>)<br>    <span class="hljs-comment">// 允许返回的头</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br>      res.<span class="hljs-title function_">end</span>() <span class="hljs-comment">// OPTIONS请求不做任何处理</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">next</span>()<br>&#125;)<br>app.<span class="hljs-title function_">put</span>(<span class="hljs-string">&#x27;/getData&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">headers</span>)<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;jw&#x27;</span>) <span class="hljs-comment">//返回一个响应头，后台需设置</span><br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;我不爱你&#x27;</span>)<br>&#125;)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/getData&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">headers</span>)<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;我不爱你&#x27;</span>)<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(__dirname))<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">4000</span>)<br>复制代码<br></code></pre></td></tr></table></figure><p>上述代码由<code>http://localhost:3000/index.html</code>向<code>http://localhost:4000/</code>跨域请求，正如我们上面所说的，后端是实现 CORS 通信的关键。</p><h3 id="3-postMessage"><a href="#3-postMessage" class="headerlink" title="3.postMessage"></a>3.postMessage</h3><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p><strong>postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递</strong>。</p><blockquote><p>otherWindow.postMessage(message, targetOrigin, [transfer]);</p></blockquote><ul><li>message: 将要发送到其他 window的数据。</li><li>targetOrigin:通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。</li><li>transfer(可选)：是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</li></ul><p>接下来我们看个例子： <code>http://localhost:3000/a.html</code>页面向<code>http://localhost:4000/b.html</code>传递“我爱你”,然后后者传回”我不爱你”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// a.html</span><br>  &lt;iframe src=<span class="hljs-string">&quot;http://localhost:4000/b.html&quot;</span> frameborder=<span class="hljs-string">&quot;0&quot;</span> id=<span class="hljs-string">&quot;frame&quot;</span> onload=<span class="hljs-string">&quot;load()&quot;</span>&gt;&lt;<span class="hljs-regexp">/iframe&gt; /</span><span class="hljs-regexp">/等它加载完触发一个事件</span><br><span class="hljs-regexp">  /</span><span class="hljs-regexp">/内嵌在http:/</span><span class="hljs-regexp">/localhost:3000/</span>a.<span class="hljs-property">html</span><br>    &lt;script&gt;<br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">load</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> frame = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;frame&#x27;</span>)<br>        frame.<span class="hljs-property">contentWindow</span>.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;我爱你&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:4000&#x27;</span>) <span class="hljs-comment">//发送数据</span><br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123; <span class="hljs-comment">//接受返回数据</span><br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">data</span>) <span class="hljs-comment">//我不爱你</span><br>        &#125;<br>      &#125;<br>    &lt;/script&gt;<br>复制代码<br><span class="hljs-comment">// b.html</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">data</span>) <span class="hljs-comment">//我爱你</span><br>    e.<span class="hljs-property">source</span>.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;我不爱你&#x27;</span>, e.<span class="hljs-property">origin</span>)<br> &#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="4-websocket"><a href="#4-websocket" class="headerlink" title="4.websocket"></a>4.websocket</h3><p>Websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket和HTTP都是应用层协议，都基于 TCP 协议。但是 <strong>WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据</strong>。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p><p>原生WebSocket API使用起来不太方便，我们使用<code>Socket.io</code>，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p><p>我们先来看个例子：本地文件socket.html向<code>localhost:3000</code>发生数据和接受数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml">// socket.html<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://localhost:3000&#x27;</span>);</span><br><span class="language-javascript">    socket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      socket.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;我爱你&#x27;</span>);<span class="hljs-comment">//向服务器发送数据</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    socket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">data</span>);<span class="hljs-comment">//接收服务器返回的数据</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>复制代码<br>// server.js<br>let express = require(&#x27;express&#x27;);<br>let app = express();<br>let WebSocket = require(&#x27;ws&#x27;);//记得安装ws<br>let wss = new WebSocket.Server(&#123;port:3000&#125;);<br>wss.on(&#x27;connection&#x27;,function(ws) &#123;<br>  ws.on(&#x27;message&#x27;, function (data) &#123;<br>    console.log(data);<br>    ws.send(&#x27;我不爱你&#x27;)<br>  &#125;);<br>&#125;)<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="5-Node中间件代理-两次跨域"><a href="#5-Node中间件代理-两次跨域" class="headerlink" title="5. Node中间件代理(两次跨域)"></a>5. Node中间件代理(两次跨域)</h3><p>实现原理：<strong>同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。</strong> 代理服务器，需要做以下几个步骤：</p><ul><li><p>接受客户端请求 。</p></li><li><p>将请求 转发给服务器。</p></li><li><p>拿到服务器 响应 数据。</p></li><li><p>将 响应 转发给客户端。</p><p><img src="/../imgs/%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/1685c5bed77e7788tplv-t2oaga2asx-zoom-in-crop-mark4536000.webp" alt="img"></p></li></ul><p>我们先来看个例子：本地文件index.html文件，通过代理服务器<code>http://localhost:3000</code>向目标服务器<code>http://localhost:4000</code>请求数据。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs xml">// index.html(http://127.0.0.1:5500)<br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xiamen&#x27;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span> &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">contentType</span>: <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result) <span class="hljs-comment">// &#123;&quot;title&quot;:&quot;fontend&quot;,&quot;password&quot;:&quot;123456&quot;&#125;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">     </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>复制代码<br>// server1.js 代理服务器(http://localhost:3000)<br>const http = require(&#x27;http&#x27;)<br>// 第一步：接受客户端请求<br>const server = http.createServer((request, response) =&gt; &#123;<br>  // 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段<br>  response.writeHead(200, &#123;<br>    &#x27;Access-Control-Allow-Origin&#x27;: &#x27;*&#x27;,<br>    &#x27;Access-Control-Allow-Methods&#x27;: &#x27;*&#x27;,<br>    &#x27;Access-Control-Allow-Headers&#x27;: &#x27;Content-Type&#x27;<br>  &#125;)<br>  // 第二步：将请求转发给服务器<br>  const proxyRequest = http<br>    .request(<br>      &#123;<br>        host: &#x27;127.0.0.1&#x27;,<br>        port: 4000,<br>        url: &#x27;/&#x27;,<br>        method: request.method,<br>        headers: request.headers<br>      &#125;,<br>      serverResponse =&gt; &#123;<br>        // 第三步：收到服务器的响应<br>        var body = &#x27;&#x27;<br>        serverResponse.on(&#x27;data&#x27;, chunk =&gt; &#123;<br>          body += chunk<br>        &#125;)<br>        serverResponse.on(&#x27;end&#x27;, () =&gt; &#123;<br>          console.log(&#x27;The data is &#x27; + body)<br>          // 第四步：将响应结果转发给浏览器<br>          response.end(body)<br>        &#125;)<br>      &#125;<br>    )<br>    .end()<br>&#125;)<br>server.listen(3000, () =&gt; &#123;<br>  console.log(&#x27;The proxyServer is running at http://localhost:3000&#x27;)<br>&#125;)<br>复制代码<br>// server2.js(http://localhost:4000)<br>const http = require(&#x27;http&#x27;)<br>const data = &#123; title: &#x27;fontend&#x27;, password: &#x27;123456&#x27; &#125;<br>const server = http.createServer((request, response) =&gt; &#123;<br>  if (request.url === &#x27;/&#x27;) &#123;<br>    response.end(JSON.stringify(data))<br>  &#125;<br>&#125;)<br>server.listen(4000, () =&gt; &#123;<br>  console.log(&#x27;The server is running at http://localhost:4000&#x27;)<br>&#125;)<br>复制代码<br></code></pre></td></tr></table></figure><p>上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在index.html文件打印出<code>&#123;&quot;title&quot;:&quot;fontend&quot;,&quot;password&quot;:&quot;123456&quot;&#125;</code></p><h3 id="6-nginx反向代理"><a href="#6-nginx反向代理" class="headerlink" title="6.nginx反向代理"></a>6.nginx反向代理</h3><p>实现原理类似于Node中间件代理，需要你搭建一个中转nginx服务器，用于转发请求。</p><p>使用nginx反向代理实现跨域，是最简单的跨域方式。只需要修改nginx的配置即可解决跨域问题，支持所有浏览器，支持session，不需要修改任何代码，并且不会影响服务器性能。</p><p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p><p>先下载<a href="https://link.juejin.cn/?target=http://nginx.org/en/download.html">nginx</a>，然后将nginx目录下的nginx.conf修改如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini">// proxy服务器<br>server &#123;<br>    listen       81<span class="hljs-comment">;</span><br>    server_name  www.domain1.com<span class="hljs-comment">;</span><br>    location / &#123;<br>        proxy_pass   http://www.domain2.com:8080<span class="hljs-comment">;  #反向代理</span><br>        proxy_cookie_domain www.domain2.com www.domain1.com<span class="hljs-comment">; #修改cookie里域名</span><br>        index  index.html index.htm<span class="hljs-comment">;</span><br><br>        <span class="hljs-comment"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br>        add_header Access-Control-Allow-Origin http://www.domain1.com<span class="hljs-comment">;  #当前端只跨域不带cookie时，可为*</span><br>        add_header Access-Control-Allow-Credentials true<span class="hljs-comment">;</span><br>    &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>最后通过命令行<code>nginx -s reload</code>启动nginx</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// index.html</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br><span class="hljs-comment">// 前端开关：浏览器是否读写cookie</span><br>xhr.withCredentials = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 访问nginx中的代理服务器</span><br>xhr.open(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;http://www.domain1.com:81/?user=admin&#x27;</span>, <span class="hljs-literal">true</span>);<br>xhr.send();<br>复制代码<br><span class="hljs-comment">// server.js</span><br><span class="hljs-keyword">var</span> http = require(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> server = http.createServer();<br><span class="hljs-keyword">var</span> qs = require(<span class="hljs-string">&#x27;querystring&#x27;</span>);<br>server.<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, function(req, res) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-keyword">params</span> = qs.parse(req.url.substring(<span class="hljs-number">2</span>));<br>    <span class="hljs-comment">// 向前台写cookie</span><br>    res.writeHead(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&#x27;Set-Cookie&#x27;</span>: <span class="hljs-string">&#x27;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&#x27;</span>   <span class="hljs-comment">// HttpOnly:脚本无法读取</span><br>    &#125;);<br>    res.write(JSON.stringify(<span class="hljs-keyword">params</span>));<br>    res.end();<br>&#125;);<br>server.listen(<span class="hljs-string">&#x27;8080&#x27;</span>);<br>console.log(<span class="hljs-string">&#x27;Server is running at port 8080...&#x27;</span>);<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="7-window-name-iframe"><a href="#7-window-name-iframe" class="headerlink" title="7.window.name + iframe"></a>7.window.name + iframe</h3><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p><p>其中a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"> // a.html(http://localhost:3000/b.html)<br>  &lt;iframe <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://localhost:4000/c.html&quot;</span> frameborder=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-literal">on</span>load=<span class="hljs-string">&quot;load()&quot;</span> id=<span class="hljs-string">&quot;iframe&quot;</span>&gt;&lt;/iframe&gt;<br>  &lt;script&gt;<br>    let <span class="hljs-attr">first</span> = <span class="hljs-literal">true</span><br>    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name<br>    function load() &#123;<br>      if(first)&#123;<br>      // 第1次onload(跨域页)成功后，切换到同域代理页面<br>        let <span class="hljs-attr">iframe</span> = document.getElementById(<span class="hljs-string">&#x27;iframe&#x27;</span>)<span class="hljs-comment">;</span><br>        <span class="hljs-attr">iframe.src</span> = <span class="hljs-string">&#x27;http://localhost:3000/b.html&#x27;</span><span class="hljs-comment">;</span><br>        <span class="hljs-attr">first</span> = <span class="hljs-literal">false</span><span class="hljs-comment">;</span><br>      &#125;else&#123;<br>      // 第2次onload(同域b.html页)成功后，读取同域window.name中数据<br>        console.log(iframe.contentWindow.name)<span class="hljs-comment">;</span><br>      &#125;<br>    &#125;<br>  &lt;/script&gt;<br>复制代码<br></code></pre></td></tr></table></figure><p>b.html为中间代理页，与a.html同域，内容为空。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> // c.html(http://localhost:4000/c.html)<br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;我不爱你&#x27;</span>  </span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>复制代码<br></code></pre></td></tr></table></figure><p>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h3 id="8-location-hash-iframe"><a href="#8-location-hash-iframe" class="headerlink" title="8.location.hash + iframe"></a>8.location.hash + iframe</h3><p>实现原理： a.html欲与c.html跨域相互通信，通过中间页b.html来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><p>具体实现步骤：一开始a.html给c.html传一个hash值，然后c.html收到hash值后，再把hash值传递给b.html，最后b.html将结果放到a.html的hash值中。 同样的，a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"> // a.html<br>  <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://localhost:4000/c.html#iloveyou&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onhashchange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//检测hash的变化</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(location.<span class="hljs-property">hash</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>复制代码<br> // b.html<br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">parent</span>.<span class="hljs-property">parent</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span> = location.<span class="hljs-property">hash</span> </span><br><span class="language-javascript">    <span class="hljs-comment">//b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面</span></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>复制代码<br> // c.html<br> console.log(location.hash);<br>  let iframe = document.createElement(&#x27;iframe&#x27;);<br>  iframe.src = &#x27;http://localhost:3000/b.html#idontloveyou&#x27;;<br>  document.body.appendChild(iframe);<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="9-document-domain-iframe"><a href="#9-document-domain-iframe" class="headerlink" title="9.document.domain + iframe"></a>9.document.domain + iframe</h3><p><strong>该方式只能用于二级域名相同的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式</strong>。 只需要给页面添加 <code>document.domain =&#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域。</p><p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p><p>我们看个例子：页面<code>a.zf1.cn:3000/a.html</code>获取页面<code>b.zf1.cn:3000/b.html</code>中a的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">// a.html<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> helloa<br>  <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://b.zf1.cn:3000/b.html&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;load()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;frame&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-property">domain</span> = <span class="hljs-string">&#x27;zf1.cn&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">load</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(frame.<span class="hljs-property">contentWindow</span>.<span class="hljs-property">a</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>复制代码<br>// b.html<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   hellob<br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-variable language_">document</span>.<span class="hljs-property">domain</span> = <span class="hljs-string">&#x27;zf1.cn&#x27;</span></span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>复制代码<br></code></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><ul><li>CORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案</li><li>JSONP只支持GET请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li><li>不管是Node中间件代理还是nginx反向代理，主要是通过同源策略对服务器不加限制。</li><li>日常工作中，用得比较多的跨域方案是cors和nginx反向代理</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://link.juejin.cn/?target=http://www.zhufengpeixun.cn/main/course/index.html">珠峰架构课(强烈推荐)</a></li><li><a href="https://link.juejin.cn/?target=http://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解</a></li><li><a href="https://juejin.cn/book/6844733763675488269/section/6844733763771957261">前端面试之道</a></li><li><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">window.postMessage</a></li><li><a href="https://link.juejin.cn/?target=https://segmentfault.com/a/1190000011145364">前端常见跨域解决方案（全）</a></li><li><a href="https://juejin.cn/post/6844903607297376263">深入跨域问题(4) - 利用代理解决跨域</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>跨域</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/2023/01/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/01/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机操作系统知识点总结"><a href="#计算机操作系统知识点总结" class="headerlink" title="计算机操作系统知识点总结"></a>计算机操作系统知识点总结</h1><h2 id="一、操作系统概述"><a href="#一、操作系统概述" class="headerlink" title="一、操作系统概述"></a>一、操作系统概述</h2><h3 id="1-1-操作系统的定义与目标"><a href="#1-1-操作系统的定义与目标" class="headerlink" title="1.1 操作系统的定义与目标"></a>1.1 操作系统的定义与目标</h3><p>定义：操作系统是控制管理计算机系统的硬软件，分配调度资源的系统软件。</p><p>目标：方便性，有效性（提高系统资源的利用率、提高系统的吞吐量），可扩充性，开放性。</p><h3 id="1-2-操作系统的基本功能"><a href="#1-2-操作系统的基本功能" class="headerlink" title="1.2 操作系统的基本功能"></a>1.2 操作系统的基本功能</h3><p>统一管理计算机资源：处理器资源，IO设备资源，存储器资源，文件资源;<br>实现了对计算机资源的抽象：IO设备管理软件提供读写接口，文件管理软件提供操作文件接;<br>提供了用户与计算机之间的接口：GUI（图形用户界面），命令形式，系统调用形式。</p><h3 id="1-3-操作系统的特征"><a href="#1-3-操作系统的特征" class="headerlink" title="1.3 操作系统的特征"></a>1.3 操作系统的特征</h3><p>最基本的特征，互为存在条件：并发，共享；</p><p>（1）并行：指两个或多个事件可以在同一个时刻发生，多核CPU可以实现并行，一个cpu同一时刻只有一个程序在运行；</p><p>（2）并发：指两个或多个事件可以在同一个时间间隔发生，用户看起来是每个程序都在运行，实际上是每个程序都交替执行。</p><p>image-20210830104953215</p><p>（3）共享性：操作系统的中资源可供多个并发的程序共同使用，这种形式称之为资源共享。</p><p>互斥共享：当资源被程序占用时，其它想使用的程序只能等待。<br>同时访问：某种资源并发的被多个程序访问。<br>虚拟和异步特性前提是具有并发性。</p><p>（4）虚拟性：表现为把一个物理实体转变为若干个逻辑实体。</p><p>时分复用技术：资源在时间上进行复用，不同程序并发使用，多道程序分时使用计算机的硬件资源，提高资源的利用率。<br>空分复用技术：用来实现虚拟磁盘（物理磁盘虚拟为逻辑磁盘，电脑上的C盘、D盘等）、虚拟内存（在逻辑上扩大程序的存储容量）等，提高资源的利用率，提高编程效率。<br>（5）异步性：在多道程序环境下，允许多个进程并发执行，但由于资源等因素的限制，使进程的执行以“停停走走”的方式运行，而且每个进程执行的情况（运行、暂停、速度、完成）也是未知的。</p><h3 id="1-4-操作系统的中断处理"><a href="#1-4-操作系统的中断处理" class="headerlink" title="1.4 操作系统的中断处理"></a>1.4 操作系统的中断处理</h3><p>中断机制的作用：为了在多道批处理系统中让用户进行交互；</p><p>中断产生：</p><p>发生中断时，CPU立马切换到管态，开展管理工作；（管态又叫特权态，系统态或核心态，是操作系统管理的程序执行时，机器所处的状态。）<br>发生中断后，当前运行的进程回暂停运行，由操作系统内核对中断进行处理；<br>对于不同的中断信号，会进行不同的处理。<br>中断的分类：</p><p>内中断（也叫“异常”、“例外”、“陷入”）——- 信号来源：CPU内部，与当前执行指令有关；<br>外中断（中断）———-信号来源：CPU外部，与当前执行指令无关。<br>外中断的处理过程：</p><p>每执行完一个指令后，CPU都需要检查当前是否有外部中断 信号；<br>如果检查到外部中断信号，则需要保护被中断进程的CPU环境（如程序状态字PSW，程序计数器PC、各种通用寄存器）把他们存储在PCB（进程控制块中）；<br>根据中断信号类型转入相应的中断处理程序；<br>恢复原进程的CPU环境并退出中断，返回原进程继续执行。</p><h2 id="二、进程管理"><a href="#二、进程管理" class="headerlink" title="二、进程管理"></a>二、进程管理</h2><h3 id="2-1-进程管理之进程实体"><a href="#2-1-进程管理之进程实体" class="headerlink" title="2.1 进程管理之进程实体"></a>2.1 进程管理之进程实体</h3><p>为什么需要进程：</p><p>进程是系统进行资源分配和调度的基本单位；<br>进程作为程序独立运行的载体保障程序正常执行；<br>进程的存在使得操作系统资源的利用率大幅提升。+<br>进程控制块（PCB）：用于描述和控制进程运行的通用数据结构,记录进程当前状态和控制进程运行的全部信息，是进程存在的唯一标识。</p><p>进程（Process）与线程（Thread）：</p><p>线程：操作系统进行<strong>运行调度的最小单位</strong>。<br>进程：系统进行<strong>资源分配和调度的基本单位</strong>。<br>区别与联系：</p><p>一个进程可以有一个或多个线程；<br>线程包含在进程之中，是进程中实际运行工作的单位；<br>进程的线程共享进程资源；<br>一个进程可以并发多个线程，每个线程执行不同的任务。<br>image-20210826153718544</p><h3 id="2-2-进程管理之五状态模型"><a href="#2-2-进程管理之五状态模型" class="headerlink" title="2.2 进程管理之五状态模型"></a>2.2 进程管理之五状态模型</h3><p>就绪状态：其它资源（进程控制块、内存、栈空间、堆空间等）都准备好、只差CPU的状态。<br>  执行状态：进程获得CPU，其程序正在执行。<br>  阻塞状态：进程因某种原因放弃CPU的状态，阻塞进程以队列的形式放置。<br>  创建状态：创建进程时拥有PCB但其它资源尚未就绪。<br>  终止状态：进程结束由系统清理或者归还PCB的状态。</p><p>image-20210830134139425</p><h3 id="2-3-进程管理之进程同步"><a href="#2-3-进程管理之进程同步" class="headerlink" title="2.3 进程管理之进程同步"></a>2.3 进程管理之进程同步</h3><p>生产者-消费者问题：有一群生产者进程在生产产品，并将这些产品提供给消费者进程进行消费，生产者进程和消费者进程可以并发执行，在两者之间设置了一个具有n个缓冲区的缓冲池，生产者进程需要将所生产的产品放到缓冲区中（+1操作），消费者进程可以从缓冲区取走产品消费（-1操作）。</p><p>image-20210826155239580</p><p>image-20210826155306444</p><p>产生问题：当两者并发执行时可能出差错，导致预期的结果与真实的结果不相符：当执行生产者+1和消费者-1操作之后，缓冲区的值从10变为了11。</p><p>哲学家进餐问题：有5个哲学家，他们的生活方式是交替的思考和进餐，哲学家们共同使用一张圆桌，分别坐在5张椅子上，圆桌上有5只碗和5只筷子。平时哲学家们只进行思考，饥饿时则试图取靠近他们的左右两只筷子，只有两只筷子都被拿到的时候才能进餐，否则等待，进餐完毕后，放下左右筷子进行思考。</p><p>这会导致以下的问题，筷子就相当于临界资源：</p><p>临界资源指的是一些虽作为共享资源却又无法同时被多个线程共同访问的共享资源。当有进程在使用临界资源时，其他进程必须依据操作系统的同步机制等待占用进程释放该共享资源才可重新竞争使用共享资源。</p><p>进程同步的作用：对竞争资源在多进程间进行使用次序的协调，使得并发执行的多个进程之间可以有效使用资源和相互合作。</p><p>进程间同步的四原则：</p><p>空闲让进：资源无占用，允许使用；<br>忙则等待：资源被占用，请求进程等待；<br>有限等待：保证有限等待时间能够使用资源；<br>让权等待：等待时，进程需要让出CPU。</p><h4 id="2-3-1进程同步的方法（重要）"><a href="#2-3-1进程同步的方法（重要）" class="headerlink" title="2.3.1进程同步的方法（重要）"></a>2.3.1进程同步的方法（重要）</h4><p>1.使用fork系统调用创建进程：使用fork系统调用无参数，fork会返回两次，分别返回子进程id和0，返回子进程id的是父进程，返回0的是子进程。</p><p>fork系统调用是用于创建进程的；<br>fork创建的进程初始化状态与父进程一样；<br>系统会为fork的进程分配新的资源<br>2.共享内存：在某种程度上，多进程是共同使用物理内存的，但是由于操作系统的进程管理，进程间的内存空间是独立的，因此进程默认是不能访问进程空间之外的内存空间的。</p><p>共享存储允许不相关的进程访问同一片物理内存；<br>共享内存是两个进程之间共享和传递数据最快的方式；<br>共享内存未提供同步机制，需要借助其他机制管理访问；<br>image-20210826223244411</p><p>3.Unix域套接字</p><p>域套接字是一种高级的进程间通信的方法，可以用于同一机器进程间通信。</p><p>套接字（socket）：为网络通信中使用的术语。</p><p>Unix系统提供的域套接字提供了网络套接字类似的功能，如Nfinx、uWSGI等。</p><p>服务端和客户端分别使用Unix域套接字的过程：</p><p>image-20210826223709480</p><h4 id="2-3-2-线程同步的方法（重要）"><a href="#2-3-2-线程同步的方法（重要）" class="headerlink" title="2.3.2 线程同步的方法（重要）"></a>2.3.2 线程同步的方法（重要）</h4><p>线程同步的方法：</p><p>互斥锁：互斥锁是最简单的线程同步的方法，也称为互斥量，处于两态之一的变量：解锁和加锁，两个状态可以保证资源访问的串行。 原子性：指一系列操作不可被中断的特性，要么全部执行完成，要么全部没有执行。</p><p>image-20210826220013572</p><p>自旋锁：自旋锁是一种多线程同步的变量，使用自旋锁的线程会反复检查锁变量是否可用，自旋锁不会让出CPU，是一种忙等待状态，即死循环等待锁被释放，自旋锁的效率远高于互斥锁。特点：避免了进程或者线程上下文切换的开销，但是不适合在单核CPU使用。</p><p>读写锁：是一种特殊的自旋锁，允许多个读操作同时访问资源以提高读性能，但是对写操作是互斥的，即<strong>对多读少写的操作效率提升</strong>很显著。</p><p>条件变量：是一种相对比较复杂的线程同步方法，条件变量允许线程睡眠，直到满足某种条件，当<strong>满足条件时，可以给该线程信号通知唤醒</strong>。</p><p>2.3.3 线程同步方法对比（重要）<br>image-20210826222325975</p><p>image-20210826222346498</p><p>image-20210826222400048</p><p>2.4 Linux的进程管理<br>进程的类型：</p><p>前台进程：具有终端，可以和用户交互；<br>后台进程：没有占用终端，基本不和用户交互，优先级比前台进程低（将需要执行的命令以“&amp;”符号结束）；<br>守护进程：特殊的后台进程，在系统引导时启动，一直运行直到系统关闭（进程名字以“d”结尾的一般都是守护进程），如crond、sshd、httpd、mysqld…<br>进程的标记：</p><p>进程ID：非负整数，进程的唯一标记，每个进程拥有不同的ID；<br>进程的状态标记：R表示进程处于运行状态，S表示进程处于睡眠状态…</p><p>操作Linux进程的相关命令：</p><p>ps命令：列出当前的进程，结合-aux可以打印进程的详细信息（ps -aux）；<br>top命令：查看所有进程的状态；<br>kill命令：给进程发送信号。</p><h2 id="三、作业管理"><a href="#三、作业管理" class="headerlink" title="三、作业管理"></a>三、作业管理</h2><p>3.1 作业管理之进程调度<br>定义：指计算机通过决策决定哪个就绪进程可以获得CPU使用权。</p><p>什么时候需要进程调度？</p><p>主动放弃：进程正常终止；运行过程中发生异常而终止；主动阻塞（如等待I&#x2F;O）；<br>被动放弃：分给进程的时间片用完；有更高优先级的进程进入就绪队列；有更紧急的事情需要处理（如I&#x2F;O中断）；<br>进程调度方式：</p><p>非抢占式调度：只能由当前运行的进程主动放弃CPU；</p><p>处理器一旦分配给某个进程，就让该进程一直使用下去；<br>调度程序不以任何原因抢占正在被使用的处理器；<br>调度程序不以任何原因抢占正在被使用的处理器；<br>抢占式调度：可由操作系统剥夺当前进程的CPU使用权。</p><p>允许调度程序以一定的策略暂停当前运行的进程；<br>保存好旧进程的上下文信息，分配处理器给新进程；<br>image-20210826162907842</p><p>进程调度的三大机制：</p><p>就绪队列的排队机制：为了提高进程调度的效率，将就绪进程按照一定的方式排成队列，以便调度程序可以最快找到就绪进程。</p><p>image-20210830141937877</p><p>选择运行进程的委派机制：调度程序以一定的策略，选择就绪进程，将CPU资源分配给它。</p><p>新老进程的上下文切换机制：保存当前进程的上下文信息，装入被委派执行进程的运行上下文。<br>image-20210830141949702</p><p>进程调度算法：</p><p>先来先服务算法：按照在就绪队列中的先后顺序执行。<br>短进程优先调度算法：优先选择就绪队列中估计运行时间最短的进程，不利于长作业进程的执行。<br>高优先权优先调度算法：进程附带优先权，优先选择权重高的进程，可以使得紧迫的任务优先处理。<br>时间片轮转调度算法：按照FIFO的原则排列就绪进程，每次从队列头部取出待执行进程，分配一个时间片执行，是相对公平的调度算法，但是不能保证就是响应用户。<br>3.2 作业管理之死锁<br>3.2.1 进程死锁、饥饿、死循环的区别：<br>死锁：两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。永远在互相等待的进程称为死锁进程。</p><p>饥饿：由于长期得不到资源导致进程无法推进；</p><p>死循环：代码逻辑BUG。</p><p>死锁的产生：竞争资源（共享资源数量不满足各进程需求）、进程调度顺序不当，当调度顺序为A-&gt;B-&gt;C-&gt;D时会产生死锁，但改为A-&gt;D-&gt;B-&gt;C则不会产生。</p><p>image-20210826163418015</p><p>死锁的四个必要条件：</p><p>互斥条件：必须互斥使用资源才会产生死锁；<br>请求保持条件：进程至少保持一个资源，又提出新的资源请求，新资源被占用，请求被阻塞，被阻塞的进程不释放自己保持的资源；<br>不可剥夺条件：进程获得的资源在未完成使用前不能被剥夺（包括OS），只能由进程自身释放；<br>环路等待条件：发生死锁时，必然存在进程-资源环形链,环路等待不一定造成死锁，但是死锁一定有循环等待。<br>死锁的处理策略：</p><p>一.预防死锁的方法：破坏四个必要条件的中一个或多个。</p><p>破坏互斥条件：将临界资源改造成共享资源（Spooling池化技术）；（可行性不高，很多时候无法破坏互斥条件）<br>破坏请求保持条件：系统规定进程运行之前，一次性申请所有需要的资源；（资源利用率低，可能导致别的线程饥饿）<br>破坏不可剥夺条件：当一个进程请求新的资源得不到满足时，必须释放占有的资源；（实现复杂，剥夺资源可能导致部分工作失效，反复申请和释放造成额外的系统开销）<br>破坏环路等待条件：可用资源线性排序，申请必须按照需要递增申请；（进程实际使用资源顺序和编号顺序不同，会导致资源浪费）<br>二.银行家算法：检查当前资源剩余是否可以满足某个进程的最大需求；如果可以，就把该进程加入安全序列，等待进程允许完成，回收所有资源；重复1，2，直到当前没有线程等待资源；</p><p>三.死锁的检测和解除：死锁检测算法，资源剥夺法，撤销进程法（终止进程法），进程回退法；</p><h2 id="四、存储管理"><a href="#四、存储管理" class="headerlink" title="四、存储管理"></a>四、存储管理</h2><p>存储管理为了确保计算机有足够的内存处理数据；确保程序可以从可用内存中获取一部分内存使用；确保程序可以归还使用后的内存以供其他程序使用。</p><p>4.1 存储管理之内存分配与回收<br>内存分配的过程：单一连续分配（已经过时）、固定分区分配、动态分区分配（根据实际需要，动态的分配内存）。<br>  动态分区分配算法：</p><p>首次适应算法：分配内存时，从开始顺序查找适合内存区，若无合适内存区，则分配失败，每次从头部开始，使得头部地址空间不断被划分；<br>最佳适应算法：要求空闲区链表按照容量大小排序，遍历以找到最佳适合的空闲区（会留下越来越多的内部碎片）。<br>快速适应算法：要求有多个空闲区链表，每个空闲区链表存储一种容量的空闲区。<br>内存回收的过程：</p><p>回收区在空闲区下方：不需要新建空闲链表节点；只需要把空闲区1的容量增大即可；<br>回收区在空闲区上方：将回收区与空闲区合并；新的空闲区使用回收区的地址；<br>回收区在空闲区中间方：将空闲区1、空闲区2和回收区合并；新的空闲区使用空闲区1的地址；<br>仅仅剩余回收区：为回收区创建新的空闲节点；插入到相应的空闲区链表中去；<br>4.2 存储管理之段页式存储管理<br>页式存储管理：将进程逻辑空间等分成若干大小的页面，相应的把物理内存空间分成与页面大小的物理块，以页面为单位把进程空间装进物理内存中分散的物理块。</p><p>页面大小应该适中，过大难以分配，过小内存碎片过多；页面大小通常是512B~8K；</p><p>现代计算机系统中，可以支持非常大的逻辑地址空间(232~264)，具有32位逻辑地址空间的分页系统，规定页面大小为4KB，则在每个进程页表中的页表项可达1M(2个20)个，如果每个页表项占用1Byte，故每个进程仅仅页表就要占用1MB的内存空间。</p><p>image-20210830150815294</p><p>段式存储管理：将进程逻辑空间分成若干段（不等分），段的长度由连续逻辑的长度决定。</p><p>页式和者段式存储管理相比：</p><p>段式存储和页式存储都离散地管理了进程的逻辑空间；<br>页是物理单位，段是逻辑单位；<br>分页是为了合理利用空间，分段是满足用户要求页大小由硬件固定，段长度可动态变化；<br>页表信息是一维的，段表信息是二维的；<br>段页式存储管理：现将逻辑空间按照段式管理分成若干段，再将内存空间按照页式管理分成若干页，分页可以有效提高内存利用率，分段可以更好的满足用户需求。</p><p>image-20210826165620416</p><p>4.3 存储管理之虚拟内存<br>虚拟内存概述：是操作系统内存管理的关键技术，使得多道程序运行和大程序运行成为现实，把程序使用内存划分，将部分暂时不使用的内存放置在辅存，实际是对物理内存的扩充。<br>  局部性原理：指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。<br>  虚拟内存的置换算法：先进先出（FIFO）、最不经常使用（LFU）、最近最少使用（LRU）</p><p>虚拟内存的特征：</p><p>多次性：无需再作业运行时一次性全部装入内存，而是允许被分成多次调入内存；<br>对换性：无需在作业运行时一直常驻内存，而是允许在作业运行过程中，将作业换入、换出；<br>虚拟性：从逻辑上扩充了内存的容量，使用户看到的内存用来，远大于实际的容量；<br>4.4 Linux的存储管理<br>Buddy内存管理算法：经典的内存管理算法，为解决内存外碎片的问题，算法基于计算机处理二进制的优势具有极高的效率。<br>  Linux交换空间：交换空间（Swap）是磁盘的一个分区，Linux内存满时，会把一些内存交换至Swap空间，Swap空间是初始化系统时配置的。<br>  Swap空间与虚拟内存的对比：</p><p>image-20210830151958862</p><p>五、文件管理<br>5.1 操作系统的文件管理<br>文件的逻辑结构：</p><p>逻辑结构的文件类型：有结构文件（文本文件，文档，媒体文件）、无结构文件（二进制文件、链接库）。<br>顺序文件：按顺序放在存储介质中的文件，在逻辑文件当中存储效率最高，但不适合存储可变长文件。<br>索引文件：为解决可变长文件存储而发明，需要配合索引表存储。<br>辅存的存储空间分配：</p><p>辅存的分配方式：连续分配（读取文件容易，速度快）、链接分配（隐式链接和显式链接）、索引分配<br>辅存的存储空间管理：空闲表、空闲链表、位示图。<br>目录树：使得任何文件或目录都有唯一的路径。</p><p>image-20210830152736217</p><p>Linux文件的基本操作：参考链接</p><p>image-20210826213430203</p><p>img</p><p>image-20210826214028660</p><p>Linux的文件系统：FAT、NTFS（对FAT进行改进）、EXT2&#x2F;3&#x2F;4（扩展文件系统，Linux的文件系统）</p><p>六、设备管理<br>I&#x2F;O设备的基本概念：将数据输入输出计算机的外部设备；</p><p>广义的IO设备：</p><p>按照使用特性分类：存储设备（内存、磁盘、U盘）和交互IO设备（键盘、显示器、鼠标）；<br>按照信息交换分类：块设备（磁盘、SD卡）和字符设备（打印机、shell终端）；<br>按照设备共享属性分类：独占设备，共享设备，虚拟设备；<br>按照传输速率分类：低速设备，高速设备；<br>IO设备的缓冲区：减少CPU处理IO请求的频率，提高CPU与IO设备之间的并行性。</p><p>SPOOLing技术：虚拟设备技术，把同步调用低速设备改为异步调用，在输入、输出之间增加了排队转储环节(输入井、输出井)，SPoOLing负责输入（出）井与低速设备之间的调度，逻辑上，进程直接与高速设备交互，减少了进程的等待时间。</p><p>七、实现支持异步任务的线程池<br>线程池：线程池是存放多个线程的容器，CPU调度线程执行后不会销毁线程，将线程放回线程池重新利用。</p><p>使用线程池的原因：</p><p>线程是稀缺资源 ，不应该频繁创建和销毁；<br>架构解耦，业务创建和业务处理解耦，更加优雅；<br>线程池是使用线程的最佳实践。<br>实现线程安全的队列Queue</p><p>队列：用于存放多个元素，是存放各种元素的“池”。<br>实现的基本功能：获取当前队列元素数量，往队列放入元素，往队列取出元素。<br>注意：队列可能有多个线程同时操作，因此需要保证线程安全，如下两种情况：<br>image-20210830160845040</p><p>实现基本任务对象Task<br>实现的基本功能：任务参数，任务唯一标记（UUID），任务具体的执行逻辑</p><p>实现任务处理线程ProcessThread：任务处理线程需要不断地从任务队列里取任务执行，任务处理线程需要有一个标记，标记线程什么时候应该停止。<br>实现的基本功能：基本属性（任务队列、标记），线程执行的逻辑（run），线程停止（stop）。</p><p>实现任务处理线程池Pool：存放多个任务处理线程，负责多个线程的启停，管理向线程池的提交任务，下发给线程去执行。<br>实现的基本过程：基本属性，提交任务（put，batch_put），线程启停（start，join），线程池大小（size）。</p><p>实现异步任务处理AsyncTask：给任务添加一个标记，任务完成后，则标记为完成；任务完成时可直接获取任务运行结果；任务未完成时，获取任务结果，会阻塞获取线程。<br>主要实现的两个函数：设置运行结果（set_result），获取运行结果（get_result)</p><p>文章知识点与官方知识档案匹配，可进一步学习相关知识<br>CS入门技能树Linux入门初识Linux17162 人正在系统学习中</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>Linux</tag>
      
      <tag>计算机系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript数组常用方法总结</title>
    <link href="/2023/01/27/JavaScript%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2023/01/27/JavaScript%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript常用的数组方法的总结"><a href="#JavaScript常用的数组方法的总结" class="headerlink" title="JavaScript常用的数组方法的总结"></a>JavaScript常用的数组方法的总结</h1><p>此篇属于前端算法入门系列的第一篇，主要介绍常用的<code>数组方法</code>、<code>字符串方法</code>、<code>遍历方法</code>、<code>高阶函数</code>、<code>正则表达式</code>以及相关<code>数学知识</code>。</p><blockquote><p><strong>文章主要包含以下内容：</strong></p><ul><li>数组常用方法</li><li>字符串常用方法</li><li>常用遍历方法&amp;高阶函数</li><li>常用正则表达式</li><li>数学知识</li></ul></blockquote><h2 id="一、数组常用方法"><a href="#一、数组常用方法" class="headerlink" title="一、数组常用方法"></a>一、数组常用方法</h2><h3 id="1-push"><a href="#1-push" class="headerlink" title="1.push()"></a>1.push()</h3><p>在尾部追加，类似于压栈，原数组会改变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">8</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [1, 2, 3, 8]</span><br></code></pre></td></tr></table></figure><h3 id="2-pop"><a href="#2-pop" class="headerlink" title="2.pop()"></a>2.pop()</h3><p>在尾部弹出，类似于出栈，原数组会变。数组的 <code>push</code> &amp; <code>pop</code> 可以模拟常见数据结构之一：栈。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> popVal = arr.<span class="hljs-title function_">pop</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(popVal) <span class="hljs-comment">// 3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [1, 2]</span><br><br><span class="hljs-comment">// 数组模拟常见数据结构之一：栈</span><br><span class="hljs-keyword">const</span> stack = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>stack.<span class="hljs-title function_">push</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 压栈</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stack) <span class="hljs-comment">// [0, 1, 2]</span><br><br><span class="hljs-keyword">const</span> popValue = stack.<span class="hljs-title function_">pop</span>() <span class="hljs-comment">// 出栈</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(popValue) <span class="hljs-comment">// 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stack) <span class="hljs-comment">// [0, 1]</span><br></code></pre></td></tr></table></figure><h3 id="3-unshift"><a href="#3-unshift" class="headerlink" title="3.unshift()"></a>3.unshift()</h3><p>在头部压入数据，类似于入队，原数组会变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">0</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [0, 1, 2, 3]</span><br></code></pre></td></tr></table></figure><h3 id="4-shift"><a href="#4-shift" class="headerlink" title="4.shift()"></a>4.shift()</h3><p>在头部弹出数据，原数组会变。数组的 <code>push</code>（入队） &amp; <code>shift</code>（出队） 可以模拟常见数据结构之一：队列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> shiftVal = arr.<span class="hljs-title function_">shift</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(shiftVal) <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [2, 3]</span><br><br><span class="hljs-comment">// 数组模拟常见数据结构之一：队列</span><br><span class="hljs-keyword">const</span> queue = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>queue.<span class="hljs-title function_">push</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 入队</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(queue) <span class="hljs-comment">// [0, 1, 2]</span><br><br><span class="hljs-keyword">const</span> shiftValue = queue.<span class="hljs-title function_">shift</span>() <span class="hljs-comment">// 出队</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(shiftValue) <span class="hljs-comment">// 0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(queue) <span class="hljs-comment">// [1, 2]</span><br></code></pre></td></tr></table></figure><h3 id="5-concat"><a href="#5-concat" class="headerlink" title="5.concat()"></a>5.concat()</h3><p><code>concat</code>会在当前数组尾部拼接传入的数组，然后返回一个新数组，原数组不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> arr2 = arr.<span class="hljs-title function_">concat</span>([<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2) <span class="hljs-comment">// [1, 2, 3, 7, 8, 9]</span><br></code></pre></td></tr></table></figure><h3 id="6-indexOf"><a href="#6-indexOf" class="headerlink" title="6.indexOf()"></a>6.indexOf()</h3><p>在数组中寻找该值，找到则返回其下标，找不到则返回<code>-1</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">2</span>)) <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">0</span>)) <span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure><h3 id="7-includes"><a href="#7-includes" class="headerlink" title="7.includes()"></a>7.includes()</h3><p>在数组中寻找该值，找到则返回<code>true</code>，找不到则返回<code>false</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">includes</span>(<span class="hljs-number">2</span>)) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">includes</span>(<span class="hljs-number">4</span>)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="8-join"><a href="#8-join" class="headerlink" title="8.join()"></a>8.join()</h3><p>将数组转化成字符串，并返回该字符串，不传值则默认逗号隔开，原数组不变。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.join()) <span class="hljs-comment">// ‘1, 2, 3’</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr) <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><h3 id="9-reverse"><a href="#9-reverse" class="headerlink" title="9.reverse()"></a>9.reverse()</h3><p>翻转原数组，并返回已完成翻转的数组，原数组改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">reverse</span>()) <span class="hljs-comment">// [3, 2, 1]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [3, 2, 1]</span><br></code></pre></td></tr></table></figure><h3 id="10-slice-start，end"><a href="#10-slice-start，end" class="headerlink" title="10.slice(start，end)"></a>10.slice(start，end)</h3><p>从<code>start</code> 开始截取到<code>end</code>，但是不包括<code>end</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)) <span class="hljs-comment">// [2, 3, 4]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="11-splice-start-deleteCount-item1-item2……"><a href="#11-splice-start-deleteCount-item1-item2……" class="headerlink" title="11.splice(start, deleteCount, item1, item2……)"></a>11.splice(start, deleteCount, item1, item2……)</h3><ul><li><code>start</code>参数 开始的位置</li><li><code>deleteCount</code>要截取的个数</li><li>后面的<code>items</code>为要添加的元素</li><li>如果<code>deleteCount</code>为<code>0</code>，则表示不删除元素，从<code>start</code>位置开始添加后面的几个元素到原始的数组里面。</li><li>返回值为由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</li><li>这个方法会改变原始数组，数组的长度会发生变化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr3 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-string">&quot;f1&quot;</span>, <span class="hljs-string">&quot;f2&quot;</span>];<br><span class="hljs-keyword">const</span> arr4 = arr3.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 删除第三个元素以后的三个数组元素(包含第三个元素)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr4); <span class="hljs-comment">// [3, 4, 5];</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr3); <span class="hljs-comment">// [1, 2, 6, 7, &quot;f1&quot;, &quot;f2&quot;]; 原始数组被改变</span><br><br><span class="hljs-keyword">const</span> arr5 = arr3.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;wu&quot;</span>, <span class="hljs-string">&quot;leon&quot;</span>); <br><span class="hljs-comment">// 从第2位开始删除0个元素，插入&quot;wu&quot;,&quot;leon&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr5); <span class="hljs-comment">// [] 返回空数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr3); <span class="hljs-comment">// [1, 2, &quot;wu&quot;, &quot;leon&quot;, 6, 7, &quot;f1&quot;, &quot;f2&quot;]; 原始数组被改变</span><br><br><span class="hljs-keyword">const</span> arr6 = arr3.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;xiao&quot;</span>, <span class="hljs-string">&quot;long&quot;</span>);<br><span class="hljs-comment">// 从第 2 位开始删除 3 个元素，插入&quot;xiao&quot;, &quot;long&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr6); <span class="hljs-comment">// [&quot;wu&quot;, &quot;leon&quot;, 6]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr3); <span class="hljs-comment">//[ 1, 2, &quot;xiao&quot;, &quot;long&quot;, 7, &quot;f1&quot;, &quot;f2&quot;]</span><br><br><span class="hljs-keyword">const</span> arr7 = arr3.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 从第三个元素开始删除所有的元素</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr7);<span class="hljs-comment">// [&quot;xiao&quot;, &quot;long&quot;, 7, &quot;f1&quot;, &quot;f2&quot;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr3); <span class="hljs-comment">// [1, 2]</span><br></code></pre></td></tr></table></figure><h3 id="12-sort"><a href="#12-sort" class="headerlink" title="12.sort()"></a>12.sort()</h3><ul><li>对数组的元素进行排序，并返回数组。</li><li>默认排序顺序是在将元素转换为字符串，然后比较它们的<code>UTF-16</code>代码单元值序列时构建的。</li><li>由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。</li></ul><p>可参考 <strong>MDN：Sort</strong>[5]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [3, 2, 1]</span><br></code></pre></td></tr></table></figure><h3 id="13-toString"><a href="#13-toString" class="headerlink" title="13.toString()"></a>13.toString()</h3><p>将数组转化成字符串，并返回该字符串，逗号隔开，原数组不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">toString</span>()) <span class="hljs-comment">// ‘1, 2, 3, 4, 5’</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h2 id="二、字符串常用方法"><a href="#二、字符串常用方法" class="headerlink" title="二、字符串常用方法"></a>二、字符串常用方法</h2><h3 id="1-charAt"><a href="#1-charAt" class="headerlink" title="1.charAt()"></a>1.charAt()</h3><p>返回指定索引位置处的字符。类似于数组用中括号获取相应下标位置的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">2</span>)) <span class="hljs-comment">// 输出 &#x27;c&#x27; </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str[<span class="hljs-number">2</span>]) <span class="hljs-comment">// 输出 &#x27;c&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-concat"><a href="#2-concat" class="headerlink" title="2.concat()"></a>2.concat()</h3><p>类似数组的concat()，用来返回一个合并拼接两个或两个以上字符串。原字符串不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str1 = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-keyword">const</span> str2 = <span class="hljs-string">&#x27;1234567&#x27;</span><br><span class="hljs-keyword">const</span> str3 = str1.<span class="hljs-title function_">concat</span>(str2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str3) <span class="hljs-comment">// 输出 &#x27;abcdefg1234567&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-indexOf-、lastIndexOf"><a href="#3-indexOf-、lastIndexOf" class="headerlink" title="3.indexOf()、lastIndexOf()"></a>3.indexOf()、lastIndexOf()</h3><p><code>indexOf</code>,返回一个字符在字符串中首次出现的位置,<code>lastIndexOf</code>返回一个字符在字符串中最后一次出现的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;abcdcefcg&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;c&#x27;</span>)) <span class="hljs-comment">// 输出 &#x27;2&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;c&#x27;</span>)) <span class="hljs-comment">// 输出 &#x27;7&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="4-slice"><a href="#4-slice" class="headerlink" title="4.slice()"></a>4.slice()</h3><p>提取字符串的片断，并把提取的字符串作为新的字符串返回出来。原字符串不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">slice</span>()) <span class="hljs-comment">// 输出 &#x27;abcdefg&#x27;, 不传递参数默认复制整个字符串</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)) <span class="hljs-comment">// 输出 &#x27;bcdefg&#x27;,传递一个，则为提取的起点，然后到字符串结尾</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>, str.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>)) <span class="hljs-comment">// 输出&#x27;cdef&#x27;,传递两个，为提取的起始点和结束点</span><br></code></pre></td></tr></table></figure><h3 id="5-split"><a href="#5-split" class="headerlink" title="5.split()"></a>5.split()</h3><p>使用指定的分隔符将一个字符串拆分为多个子字符串数组并返回，原字符串不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;A*B*C*D*E*F*G&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;*&#x27;</span>)) <span class="hljs-comment">// 输出 [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="6-substr-substring"><a href="#6-substr-substring" class="headerlink" title="6.substr(), substring()"></a>6.substr(), substring()</h3><ul><li>这两个方法的功能都是截取一个字符串的片段，并返回截取的字符串。</li><li><code>substr</code>和<code>substring</code>这两个方法不同的地方就在于参数二，<code>substr</code>的参数二是截取返回出来的这个字符串指定的长度，<code>substring</code>的参数二是截取返回这个字符串的结束点，并且不包含这个结束点。而它们的参数一，都是一样的功能，截取的起始位置。</li><li><strong>注意事项</strong>：<code>substr</code>的参数二如果为<code>0</code>或者负数，则返回一个空字符串，如果未填入，则会截取到字符串的结尾去。<code>substring</code>的参数一和参数二为<code>NAN</code>或者负数，那么它将被替换为<code>0</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;ABCDEFGHIJKLMN&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>))  <span class="hljs-comment">// 输出 &#x27;CDEFGHIJKLMN&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>)) <span class="hljs-comment">// 输出 &#x27;CDEFGHIJKLMN&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>))  <span class="hljs-comment">// 输出 &#x27;CDEFGHIJK&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>))  <span class="hljs-comment">// 输出 &#x27;CDEFGHI&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="7-match"><a href="#7-match" class="headerlink" title="7.match()"></a>7.match()</h3><p><code>match()</code>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配，并返回一个包含该搜索结果的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;2018年结束了，2019年开始了，2020年就也不远了&#x27;</span><br><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/\d+/g</span>  <span class="hljs-comment">// 这里是定义匹配规则，匹配字符串里的1到多个数字</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">match</span>(reg))  <span class="hljs-comment">// 输出符合匹配规则的内容，以数组形式返回 [&#x27;2018&#x27;, &#x27;2019&#x27;, &#x27;2020&#x27;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">match</span>(<span class="hljs-string">&#x27;20&#x27;</span>))  <span class="hljs-comment">// 不使用正则 [&quot;20&quot;, index: 0, input: &quot;2018年结束了，2019年开始了&quot;]</span><br></code></pre></td></tr></table></figure><p><strong>注意事项</strong>:如果<code>match</code>方法没有找到匹配，将返回<code>null</code>。如果找到匹配，则 <code>match</code>方法会把匹配到以数组形式返回，如果正则规则未设置全局修饰符<code>g</code>，则 <code>match</code>方法返回的数组有两个特性：<code>input</code>和<code>index</code>。<code>input</code>属性包含整个被搜索的字符串。<code>index</code>属性包含了在整个被搜索字符串中匹配的子字符串的位置。</p><h3 id="8-replace"><a href="#8-replace" class="headerlink" title="8.replace()"></a>8.replace()</h3><p><code>replace</code>接收两个参数，参数一是需要替换掉的字符或者一个正则的匹配规则，参数二，需要替换进去的字符，仔实际的原理当中，参数二，你可以换成一个回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;2018年结束了，2019年开始了，2020年就也不远了&#x27;</span><br><span class="hljs-keyword">const</span> rex = <span class="hljs-regexp">/\d+/g</span>  <span class="hljs-comment">// 这里是定义匹配规则，匹配字符串里的1到多个数字</span><br><span class="hljs-keyword">const</span> str1 = str.<span class="hljs-title function_">replace</span>(rex, <span class="hljs-string">&#x27;****&#x27;</span>) <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1) <span class="hljs-comment">// 输出：&quot;****年结束了，****年开始了,****年也不远了&quot;</span><br><span class="hljs-keyword">const</span> str2 = str.<span class="hljs-title function_">replace</span>(rex, <span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>)  <span class="hljs-comment">// 看下面的图片</span><br>    <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;零&#x27;</span>, <span class="hljs-string">&#x27;壹&#x27;</span>, <span class="hljs-string">&#x27;贰&#x27;</span>, <span class="hljs-string">&#x27;叁&#x27;</span>, <span class="hljs-string">&#x27;肆&#x27;</span>, <span class="hljs-string">&#x27;伍&#x27;</span>, <span class="hljs-string">&#x27;陆&#x27;</span>, <span class="hljs-string">&#x27;柒&#x27;</span>, <span class="hljs-string">&#x27;捌&#x27;</span>, <span class="hljs-string">&#x27;玖&#x27;</span>]<br>    <span class="hljs-keyword">let</span> newStr = <span class="hljs-string">&#x27;&#x27;</span><br>    item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)&#123;<br>            newStr += arr[i]<br>    &#125;)     <br>    <span class="hljs-keyword">return</span> newStr       <br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2) <span class="hljs-comment">// 输出：贰零壹捌年结束了，贰零壹玖年开始了,贰零贰零年也不远了</span><br></code></pre></td></tr></table></figure><h3 id="9-search"><a href="#9-search" class="headerlink" title="9.search()"></a>9.search()</h3><p>在目标字符串中搜索与正则规则相匹配的字符，搜索到，则返回第一个匹配项在目标字符串当中的位置，没有搜索到则返回一个<code>-1</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;2018年结束了，2019年开始了，2020年就也不远了&#x27;</span><br><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/\d+/i</span>  <span class="hljs-comment">// 这里是定义匹配规则,匹配字符串里的1到多个数字</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">search</span>(reg)) <span class="hljs-comment">// 输出 0  这里搜索到的第一项是从位置0开始的</span><br></code></pre></td></tr></table></figure><h3 id="10-toLowerCase-toUpperCase"><a href="#10-toLowerCase-toUpperCase" class="headerlink" title="10.toLowerCase(),toUpperCase()"></a>10.toLowerCase(),toUpperCase()</h3><p><code>toLowerCase</code>把字母转换成小写，<code>toUpperCase()</code>则是把字母转换成大写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str1 = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-keyword">const</span> str2 = <span class="hljs-string">&#x27;ABCDEFG&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2.<span class="hljs-title function_">toLowerCase</span>())  <span class="hljs-comment">// 输出：&#x27;abcdefg&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1.<span class="hljs-title function_">toUpperCase</span>())  <span class="hljs-comment">// 输出：&#x27;ABCDEFG&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="11-includes-startsWith-endsWith"><a href="#11-includes-startsWith-endsWith" class="headerlink" title="11.includes(), startsWith(), endsWith()"></a>11.includes(), startsWith(), endsWith()</h3><p><code>includes</code>、<code>startsWith</code>、<code>endsWith</code>，<code>es6</code>的新增方法，<code>includes</code> 用来检测目标字符串对象是否包含某个字符，返回一个布尔值，<code>startsWith</code>用来检测当前字符是否是目标字符串的起始部分，相对的<code>endwith</code>是用来检测是否是目标字符串的结尾部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;Excuse me, how do I get to park road?&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;how&#x27;</span>)) <span class="hljs-comment">// 输出：true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;Excuse&#x27;</span>)) <span class="hljs-comment">// 输出： true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;?&#x27;</span>)) <span class="hljs-comment">// 输出： true</span><br></code></pre></td></tr></table></figure><h3 id="12-repeat"><a href="#12-repeat" class="headerlink" title="12.repeat()"></a>12.repeat()</h3><p>返回一个新的字符串对象，新字符串等于重复了指定次数的原始字符串。接收一个参数，就是指定重复的次数。原字符串不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;http&#x27;</span><br><span class="hljs-keyword">const</span> str2 = str.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str) <span class="hljs-comment">// 输出：&#x27;http&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2) <span class="hljs-comment">// 输出：&#x27;httphttphttp&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="三、常用遍历方法-amp-高阶函数"><a href="#三、常用遍历方法-amp-高阶函数" class="headerlink" title="三、常用遍历方法&amp;高阶函数"></a>三、常用遍历方法&amp;高阶函数</h2><h3 id="1-for"><a href="#1-for" class="headerlink" title="1.for()"></a>1.for()</h3><p>最常用的<code>for</code>循环，经常用的数组遍历，也可以遍历字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;abc&#x27;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i])<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str[i])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-while-x2F-do-while"><a href="#2-while-x2F-do-while" class="headerlink" title="2.while() &#x2F; do while()"></a>2.while() &#x2F; do while()</h3><p><code>while</code>、<code>do while</code>主要的功能是，当满足<code>while</code>后边所跟的条件时，来执行相关业务。这两个的区别是，<code>while</code>会先判断是否满足条件，然后再去执行花括号里面的任务，而<code>do while</code>则是先执行一次花括号中的任务，再去执行<code>while</code>条件，判断下次还是否再去执行<code>do</code>里面的操作。也就是说 <strong><code>do while</code>至少会执行一次操作</strong>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">while</span>(条件)&#123;<br>     执行...<br>&#125;<br>------------<br><span class="hljs-keyword">do</span>&#123;<br>    执行...<br>&#125;<br><span class="hljs-keyword">while</span>(条件)<br></code></pre></td></tr></table></figure><h3 id="3-forEach"><a href="#3-forEach" class="headerlink" title="3.forEach()"></a>3.forEach()</h3><p>拷贝一份遍历原数组。</p><ul><li><code>return</code>无法终止循环。不过可以起到<code>continue</code>效果。</li><li>本身是不支持的<code>continue</code>与<code>break</code>语句的我们可以通过<code>some</code>和 <code>every</code>来实现。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>]<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (item &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`索引：<span class="hljs-subst">$&#123;index&#125;</span>，数值：<span class="hljs-subst">$&#123;item&#125;</span>`</span>)<br>    arr[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// 索引：0，数值：5</span><br><span class="hljs-comment">// 索引：2，数值：3</span><br><span class="hljs-comment">// 索引：3，数值：7</span><br><span class="hljs-comment">// 索引：4，数值：4</span><br><span class="hljs-comment">// [5, 1, 3, 7, 4, 0]</span><br></code></pre></td></tr></table></figure><h3 id="4-for…in"><a href="#4-for…in" class="headerlink" title="4.for…in"></a>4.for…in</h3><ul><li><code>for...in</code> 是 ES5 标准， 此方法遍历数组效率低，主要是用来循环遍历对象的属性。</li><li>遍历数组的缺点：数组的下标<code>index</code>值是数字，<code>for-in</code>遍历的<code>index</code>值<code>&quot;0&quot;,&quot;1&quot;,&quot;2&quot;</code>等是字符串。</li><li><code>Object.defineProperty</code>，建立的属性，默认不可枚举。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> foo = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span><br>&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(foo, <span class="hljs-string">&quot;age&quot;</span>, &#123; value : <span class="hljs-number">18</span> &#125;)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> foo)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`可枚举属性：<span class="hljs-subst">$&#123;key&#125;</span>`</span>)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`age属性：<span class="hljs-subst">$&#123;foo.age&#125;</span>`</span>)<br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// 可枚举属性：name</span><br><span class="hljs-comment">// 可枚举属性：sex</span><br><span class="hljs-comment">// age属性：18</span><br></code></pre></td></tr></table></figure><h3 id="5-for…of"><a href="#5-for…of" class="headerlink" title="5.for…of"></a>5.for…of</h3><p><code>for…of</code>是<code>ES6</code>新增的方法，但是<code>for…of</code>不能去遍历普通的对象，**<code>for…of</code>的好处是可以使用<code>break</code>跳出循环。**</p><ul><li><code>for-of</code>这个方法避开了<code>for-in</code>循环的所有缺陷</li><li>与<code>forEach()</code>不同的是，它可以正确响应<code>break</code>、<code>continue</code>和<code>return</code>语句</li><li><code>for-of</code>循环不仅支持数组，还支持大多数类数组对象，例如<code>DOM</code> <strong>NodeList对象</strong>[6]。</li><li><code>for-of</code>循环也支持字符串遍历</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// for of 循环直接得到的就是值</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> value <span class="hljs-keyword">of</span> arr) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面试官：说一下 <code>for...in</code> 和 <code>for...of</code> 区别？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">（<span class="hljs-number">1</span>）<span class="hljs-keyword">for</span>…<span class="hljs-keyword">in</span> 用于可枚举数据，如对象、数组、字符串<br>（<span class="hljs-number">2</span>）<span class="hljs-keyword">for</span>…<span class="hljs-keyword">of</span> 用于可迭代数据，如数组、字符串、<span class="hljs-title class_">Map</span>、<span class="hljs-title class_">Set</span><br></code></pre></td></tr></table></figure><h3 id="6-every-x2F-some"><a href="#6-every-x2F-some" class="headerlink" title="6.every &#x2F; some"></a>6.every &#x2F; some</h3><p><strong>返回一个布尔值</strong>。当我们需要判定数组中的元素是否满足某些条件时，可以使用<code>every</code> &#x2F; <code>some</code>。这两个的区别是，<code>every</code>会去判断判断数组中的每一项，而 <code>some</code>则是当某一项满足条件时返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// every</span><br><span class="hljs-keyword">const</span> foo = [<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>].<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`索引：<span class="hljs-subst">$&#123;index&#125;</span>，数值：<span class="hljs-subst">$&#123;item&#125;</span>`</span>)<br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo)<br><span class="hljs-comment">// every 打印：</span><br><span class="hljs-comment">// 索引：0，数值：5</span><br><span class="hljs-comment">// 索引：1，数值：1</span><br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// some</span><br><span class="hljs-keyword">const</span> foo = [<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>].<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`索引：<span class="hljs-subst">$&#123;index&#125;</span>，数值：<span class="hljs-subst">$&#123;item&#125;</span>`</span>)<br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo)<br><span class="hljs-comment">// some 打印：</span><br><span class="hljs-comment">// 索引：0，数值：5</span><br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="7-filter"><a href="#7-filter" class="headerlink" title="7.filter()"></a>7.filter()</h3><ul><li><code>filter</code>方法用于过滤数组成员，满足条件的成员组成一个新数组返回。</li><li>它的参数是一个函数，所有数组成员依次执行该函数，返回结果为<code>true</code>的成员组成一个新数组返回。</li><li>该方法不会改变原数组。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">javascriptjavascriptconst foo = [<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>].<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`索引：<span class="hljs-subst">$&#123;index&#125;</span>，数值：<span class="hljs-subst">$&#123;item&#125;</span>`</span>)<br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo)<br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// 索引：0，数值：5</span><br><span class="hljs-comment">// 索引：1，数值：1</span><br><span class="hljs-comment">// 索引：2，数值：3</span><br><span class="hljs-comment">// 索引：3，数值：7</span><br><span class="hljs-comment">// 索引：4，数值：4</span><br><span class="hljs-comment">// [5, 3, 7, 4]</span><br></code></pre></td></tr></table></figure><h3 id="8-map"><a href="#8-map" class="headerlink" title="8.map()"></a>8.map()</h3><ul><li><code>map</code>即是 “映射”的意思 ，原数组被“映射”成对应新数组。</li><li><code>map：</code>支持<code>return</code>，相当与原数组克隆了一份，把克隆的每项改变了，也不影响原数组。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">javascriptjavascriptjavascriptconst foo = [<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`索引：<span class="hljs-subst">$&#123;index&#125;</span>，数值：<span class="hljs-subst">$&#123;item&#125;</span>`</span>)<br>    <span class="hljs-keyword">return</span> item + <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo)<br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// 索引：0，数值：5</span><br><span class="hljs-comment">// 索引：1，数值：1</span><br><span class="hljs-comment">// 索引：2，数值：3</span><br><span class="hljs-comment">// 索引：3，数值：7</span><br><span class="hljs-comment">// 索引：4，数值：4</span><br><span class="hljs-comment">// [7, 3, 5, 9, 6]</span><br></code></pre></td></tr></table></figure><h3 id="9-reduce-x2F-reduceRight"><a href="#9-reduce-x2F-reduceRight" class="headerlink" title="9. reduce() &#x2F; reduceRight()"></a>9. reduce() &#x2F; reduceRight()</h3><p><code>reduce</code> 从左到右将数组元素做“叠加”处理，返回一个值。<code>reduceRight</code> 从右到左。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> foo = [<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">total, cur</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`叠加：<span class="hljs-subst">$&#123;total&#125;</span>，当前：<span class="hljs-subst">$&#123;cur&#125;</span>`</span>)<br>    <span class="hljs-keyword">return</span> total + cur<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo)<br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// 叠加：5，当前：1</span><br><span class="hljs-comment">// 叠加：6，当前：3</span><br><span class="hljs-comment">// 叠加：9，当前：7</span><br><span class="hljs-comment">// 叠加：16，当前：4</span><br><span class="hljs-comment">// 20</span><br></code></pre></td></tr></table></figure><h3 id="10-Object-keys遍历对象的属性"><a href="#10-Object-keys遍历对象的属性" class="headerlink" title="10.Object,keys遍历对象的属性"></a>10.Object,keys遍历对象的属性</h3><p><code>Object.keys</code>方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名，且只返回可枚举的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">p1</span>: <span class="hljs-number">123</span>,<br>  <span class="hljs-attr">p2</span>: <span class="hljs-number">456</span><br>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj) <span class="hljs-comment">// [&quot;p1&quot;, &quot;p2&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="11-Object-getOwnPropertyNames-遍历对象的属性"><a href="#11-Object-getOwnPropertyNames-遍历对象的属性" class="headerlink" title="11.Object.getOwnPropertyNames() 遍历对象的属性"></a>11.Object.getOwnPropertyNames() 遍历对象的属性</h3><p><code>Object.getOwnPropertyNames</code>方法与<code>Object.keys</code>类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但它能返回不可枚举的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&#x27;World&#x27;</span>];<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(arr) <span class="hljs-comment">// [&quot;0&quot;, &quot;1&quot;]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(arr) <span class="hljs-comment">// [&quot;0&quot;, &quot;1&quot;, &quot;length&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="以上遍历方法的区别："><a href="#以上遍历方法的区别：" class="headerlink" title="以上遍历方法的区别："></a>以上遍历方法的区别：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">一：<span class="hljs-title function_">map</span>()，<span class="hljs-title function_">forEach</span>()，<span class="hljs-title function_">filter</span>()循环的共同之处：<br>  <span class="hljs-number">1.</span>forEach，map，filter循环中途是无法停止的，总是会将所有成员遍历完。<br>  <span class="hljs-number">2.</span>他们都可以接受第二个参数，用来绑定回调函数内部的 <span class="hljs-variable language_">this</span> 变量，将回调函数内部的 <span class="hljs-variable language_">this</span> 对象，指向第二个参数，间接操作这个参数（一般是数组）。<br><br>二：<span class="hljs-title function_">map</span>()、<span class="hljs-title function_">filter</span>()循环和<span class="hljs-title function_">forEach</span>()循环的不同：<br>   forEach 循环没有返回值；map，filter 循环有返回值。<br><br>三：<span class="hljs-title function_">map</span>()和<span class="hljs-title function_">filter</span>()都会跳过空位，<span class="hljs-keyword">for</span> 和 <span class="hljs-keyword">while</span> 不会<br><br>四：<span class="hljs-title function_">some</span>()和<span class="hljs-title function_">every</span>():<br>   <span class="hljs-title function_">some</span>()只要有一个是<span class="hljs-literal">true</span>，便返回<span class="hljs-literal">true</span>；而<span class="hljs-title function_">every</span>()只要有一个是<span class="hljs-literal">false</span>，便返回<span class="hljs-literal">false</span>.<br><br>五：<span class="hljs-title function_">reduce</span>()，<span class="hljs-title function_">reduceRight</span>()：<br>   reduce是从左到右处理（从第一个成员到最后一个成员），reduceRight则是从右到左（从最后一个成员到第一个成员）。<br><br>六：<span class="hljs-title class_">Object</span>对象的两个遍历 <span class="hljs-title class_">Object</span>.<span class="hljs-property">keys</span> 与 <span class="hljs-title class_">Object</span>.<span class="hljs-property">getOwnPropertyNames</span>：<br>   他们都是遍历对象的属性，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但<span class="hljs-title class_">Object</span>.<span class="hljs-property">keys</span>不能返回不可枚举的属性；<span class="hljs-title class_">Object</span>.<span class="hljs-property">getOwnPropertyNames</span>能返回不可枚举的属性。<br></code></pre></td></tr></table></figure><h2 id="四、常用正则表达式"><a href="#四、常用正则表达式" class="headerlink" title="四、常用正则表达式"></a>四、常用正则表达式</h2><p>这里罗列一些我在刷算法题中遇到的正则表达式，如果有时间可认真学一下<strong>正则表达式不要背</strong>[7]。</p><h3 id="1-判断字符"><a href="#1-判断字符" class="headerlink" title="1.判断字符"></a>1.判断字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">由<span class="hljs-number">26</span>个英文字母组成的字符串：^[A-<span class="hljs-title class_">Za</span>-z]+$<br>由<span class="hljs-number">26</span>个大写英文字母组成的字符串：^[A-Z]+$<br>由<span class="hljs-number">26</span>个小写英文字母组成的字符串：^[a-z]+$<br>由数字和<span class="hljs-number">26</span>个英文字母组成的字符串：^[A-<span class="hljs-title class_">Za</span>-z0-<span class="hljs-number">9</span>]+$<br></code></pre></td></tr></table></figure><h3 id="2-判断数字"><a href="#2-判断数字" class="headerlink" title="2.判断数字"></a>2.判断数字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">数字：^[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]*$<br></code></pre></td></tr></table></figure><p>持续更新，敬请期待……</p><h2 id="五、数学知识"><a href="#五、数学知识" class="headerlink" title="五、数学知识"></a>五、数学知识</h2><h3 id="1-质数"><a href="#1-质数" class="headerlink" title="1.质数"></a>1.质数</h3><p>若一个正整数无法被除了<code>1</code> 和它自身之外的任何自然数整除，则称该数为质数（或素数），否则称该正整数为合数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">judgePrime</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i * i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-斐波那契数列"><a href="#2-斐波那契数列" class="headerlink" title="2.斐波那契数列"></a>2.斐波那契数列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">Fibonacci</span><span class="hljs-params">(n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> n  <br>    <span class="hljs-keyword">return</span> Fibonacci(n - <span class="hljs-number">1</span>) + Fibonacci(n - <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript面试题总结</title>
    <link href="/2023/01/23/TypeScript%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2023/01/23/TypeScript%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="TypeScrip—面试题"><a href="#TypeScrip—面试题" class="headerlink" title="TypeScrip—面试题"></a>TypeScrip—面试题</h1><p>类型 支持ES6新特性 添加ES6不具备的新特性 丰富的配置选项</p><h2 id="什么是-Typescript？"><a href="#什么是-Typescript？" class="headerlink" title="什么是 Typescript？"></a><strong>什么是 Typescript？</strong></h2><p>Typescript 是 Javascript 的超集</p><h2 id="1、-TypeScript-的主要特点是什么？"><a href="#1、-TypeScript-的主要特点是什么？" class="headerlink" title="1、 TypeScript 的主要特点是什么？"></a><strong>1、 TypeScript 的主要特点是什么？</strong></h2><p><strong>跨平台</strong>：TypeScript 编译器可以安装在任何操作系统上，包括 Windows、macOS 和 Linux。</p><p><strong>ES6 特性</strong>：TypeScript 包含计划中的 ECMAScript 2015 (ES6) 的大部分特性，例如箭头函数。</p><p><strong>面向对象的语言</strong>：TypeScript 提供所有标准的 OOP 功能，如类、接口和模块。</p><p><strong>静态类型检查</strong>：TypeScript 使用静态类型并帮助在编译时进行类型检查。因此，你可以在编写代码时发现编译时错误，而无需运行脚本。</p><p><strong>可选的静态类型</strong>：如果你习惯了 JavaScript 的动态类型，TypeScript 还允许可选的静态类型。</p><p><strong>DOM 操作</strong>：您可以使用 TypeScript 来操作 DOM 以添加或删除客户端网页元素。</p><h2 id="2、使用-TypeScript-有什么好处？"><a href="#2、使用-TypeScript-有什么好处？" class="headerlink" title="2、使用 TypeScript 有什么好处？"></a><strong>2、使用 TypeScript 有什么好处？</strong></h2><p>TypeScript 更具表现力，这意味着它的语法混乱更少。</p><p>由于高级调试器专注于在编译时之前捕获逻辑错误，因此调试很容易。</p><p>静态类型使 TypeScript 比 JavaScript 的动态类型更易于阅读和结构化。</p><p>由于通用的转译，它可以跨平台使用，在客户端和服务器端项目中。</p><h2 id="3、TypeScript-的内置数据类型有哪些？"><a href="#3、TypeScript-的内置数据类型有哪些？" class="headerlink" title="3、TypeScript 的内置数据类型有哪些？"></a><strong>3、TypeScript 的内置数据类型有哪些？</strong></h2><p><strong>数字类型</strong>：用于表示数字类型的值。TypeScript 中的所有数字都存储为浮点值。</p><p>let identifier: number &#x3D; value;</p><p><strong>布尔类型</strong>：一个逻辑二进制开关，包含true或false</p><p>let identifier: string &#x3D; “ “;</p><p><strong>Null 类型</strong>：Null 表示值未定义的变量。</p><p>let identifier: bool &#x3D; Boolean value;</p><p><strong>未定义类型</strong>：一个未定义的字面量，它是所有变量的起点。</p><p>let num: number &#x3D; null;、、、、、、、</p><p><strong>void 类型</strong>：分配给没有返回值的方法的类型。</p><p>let unusable: void &#x3D; undefined;</p><h2 id="4、TypeScript-目前的稳定版本是什么？"><a href="#4、TypeScript-目前的稳定版本是什么？" class="headerlink" title="4、TypeScript 目前的稳定版本是什么？"></a><strong>4、TypeScript 目前的稳定版本是什么？</strong></h2><p>当前的稳定版本是 4.2.3。</p><h2 id="5、TypeScript-中的接口是什么？"><a href="#5、TypeScript-中的接口是什么？" class="headerlink" title="5、TypeScript 中的接口是什么？"></a><strong>5、TypeScript 中的接口是什么？</strong></h2><p>接口为使用该接口的对象定义契约或结构。</p><p>接口是用关键字定义的interface，它可以包含使用函数或箭头函数的属性和方法声明。</p><p>interface IEmployee { empCode: number; empName: string; getSalary: (number) &#x3D;&gt; number; &#x2F;&#x2F; arrow function getManagerName(number): string; }</p><h2 id="6、TypeScript-中的模块是什么？"><a href="#6、TypeScript-中的模块是什么？" class="headerlink" title="6、TypeScript 中的模块是什么？"></a><strong>6、TypeScript 中的模块是什么？</strong></h2><p>TypeScript 中的模块是相关变量、函数、类和接口的集合。</p><p>你可以将模块视为包含执行任务所需的一切的容器。可以导入模块以轻松地在项目之间共享代码。</p><p>module module_name{class xyz{export sum(x, y){return x+y;}}</p><h2 id="7、后端如何使用TypeScript？"><a href="#7、后端如何使用TypeScript？" class="headerlink" title="7、后端如何使用TypeScript？"></a><strong>7、后端如何使用TypeScript？</strong></h2><p>你可以将 Node.js 与 TypeScript 结合使用，将 TypeScript 的优势带入后端工作。</p><p>只需输入以下命令，即可将 TypeScript 编译器安装到你的 Node.js 中：</p><p>npm i -g typescript  &#x2F;&#x2F;全局安装</p><h2 id="8、TypeScript-中的类型断言是什么？"><a href="#8、TypeScript-中的类型断言是什么？" class="headerlink" title="8、TypeScript 中的类型断言是什么？"></a><strong>8、TypeScript 中的类型断言是什么？</strong></h2><p>TypeScript 中的类型断言的工作方式类似于其他语言中的类型转换，但没有 C# 和 Java 等语言中可能的类型检查或数据重组。类型断言对运行时没有影响，仅由编译器使用。</p><p>类型断言本质上是类型转换的软版本，它建议编译器将变量视为某种类型，但如果它处于不同的形式，则不会强制它进入该模型。</p><h2 id="9、如何在-TypeScript-中创建变量？"><a href="#9、如何在-TypeScript-中创建变量？" class="headerlink" title="9、如何在 TypeScript 中创建变量？"></a><strong>9、如何在 TypeScript 中创建变量？</strong></h2><p>你可以通过三种方式创建变量：var，let，和const。</p><p>var是严格范围变量的旧风格。你应该尽可能避免使用，var因为它会在较大的项目中导致问题。</p><p>var num:number &#x3D; 1;</p><p>let是在 TypeScript 中声明变量的默认方式。与var相比，let减少了编译时错误的数量并提高了代码的可读性。</p><p>let num:number &#x3D; 1;</p><p>const创建一个其值不能改变的常量变量。它使用相同的范围规则，let并有助于降低整体程序的复杂性。</p><p>const num:number &#x3D; 100;</p><h2 id="10、在TypeScript中如何从子类调用基类构造函数？"><a href="#10、在TypeScript中如何从子类调用基类构造函数？" class="headerlink" title="10、在TypeScript中如何从子类调用基类构造函数？"></a><strong>10、在TypeScript中如何从子类调用基类构造函数？</strong></h2><p>你可以使用该super()函数来调用基类的构造函数。</p><p>class Animal { name: string; constructor(theName: string) { this.name &#x3D; theName; } move(distanceInMeters: number &#x3D; 0) { console.log(<code>$&#123;this.name&#125; moved $&#123;distanceInMeters&#125;m.</code>); }}class Snake extends Animal { constructor(name: string) { super(name); } move(distanceInMeters &#x3D; 5) { console.log(“Slithering…”); super.move(distanceInMeters); }}</p><h2 id="11、解释如何使用-TypeScript-mixin。"><a href="#11、解释如何使用-TypeScript-mixin。" class="headerlink" title="11、解释如何使用 TypeScript mixin。"></a><strong>11、解释如何使用 TypeScript mixin。</strong></h2><p>Mixin 本质上是在相反方向上工作的继承。Mixins 允许你通过组合以前类中更简单的部分类设置来构建新类。</p><p>相反，类A继承类B来获得它的功能，类B从类A需要返回一个新类的附加功能。</p><h2 id="12、TypeScript-中如何检查-null-和-undefined？"><a href="#12、TypeScript-中如何检查-null-和-undefined？" class="headerlink" title="12、TypeScript 中如何检查 null 和 undefined？"></a><strong>12、TypeScript 中如何检查 null 和 undefined？</strong></h2><p>你可以使用 juggle-check，它检查 null 和 undefined，或者使用 strict-check，它返回true设置为null的值，并且不会评估true未定义的变量。</p><p>&#x2F;&#x2F;juggleif (x &#x3D;&#x3D; null) { }</p><p>var a: number; var b: number &#x3D; null; function check(x, name) { if (x &#x3D;&#x3D; null) { console.log(name + ‘ &#x3D;&#x3D; null’); } if (x &#x3D;&#x3D;&#x3D; null) { console.log(name + ‘ &#x3D;&#x3D;&#x3D; null’); } if (typeof x &#x3D;&#x3D;&#x3D; ‘undefined’) { console.log(name + ‘ is undefined’); } } check(a, ‘a’); check(b, ‘b’);</p><h2 id="13、TypeScript-中的-getter-x2F-setter-是什么？你如何使用它们？"><a href="#13、TypeScript-中的-getter-x2F-setter-是什么？你如何使用它们？" class="headerlink" title="13、TypeScript 中的 getter&#x2F;setter 是什么？你如何使用它们？"></a><strong>13、TypeScript 中的 getter&#x2F;setter 是什么？你如何使用它们？</strong></h2><p>Getter 和 setter 是特殊类型的方法，可帮助你根据程序的需要委派对私有变量的不同级别的访问。</p><p>Getters 允许你引用一个值但不能编辑它。Setter 允许你更改变量的值，但不能查看其当前值。这些对于实现封装是必不可少的。</p><p>例如，新雇主可能能够了解get公司的员工人数，但无权set了解员工人数。</p><p>const fullNameMaxLength &#x3D; 10;class Employee { private _fullName: string &#x3D; “”; get fullName(): string { return this._fullName; } set fullName(newName: string) { if (newName &amp;&amp; newName.length &gt; fullNameMaxLength) { throw new Error(“fullName has a max length of “ + fullNameMaxLength); } this._fullName &#x3D; newName; }}let employee &#x3D; new Employee();employee.fullName &#x3D; “Bob Smith”;if (employee.fullName) { console.log(employee.fullName);}</p><h2 id="14、-如何允许模块外定义的类可以访问？"><a href="#14、-如何允许模块外定义的类可以访问？" class="headerlink" title="14、 如何允许模块外定义的类可以访问？"></a><strong>14、 如何允许模块外定义的类可以访问？</strong></h2><p>你可以使用export关键字打开模块以供在模块外使用。</p><p>module Admin { &#x2F;&#x2F; use the export keyword in TypeScript to access the class outside export class Employee { constructor(name: string, email: string) { } } let alex &#x3D; new Employee(‘alex’, ‘<a href="mailto:&#97;&#108;&#101;&#120;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#97;&#108;&#101;&#120;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>‘);}&#x2F;&#x2F; The Admin variable will allow you to access the Employee class outside the module with the help of the export keyword in TypeScriptlet nick &#x3D; new Admin.Employee(‘nick’, ‘<a href="mailto:&#x6e;&#105;&#x63;&#107;&#x40;&#121;&#x61;&#x68;&#111;&#x6f;&#46;&#99;&#111;&#x6d;">&#x6e;&#105;&#x63;&#107;&#x40;&#121;&#x61;&#x68;&#111;&#x6f;&#46;&#99;&#111;&#x6d;</a>‘);</p><h2 id="15、如何使用-Typescript-将字符串转换为数字？"><a href="#15、如何使用-Typescript-将字符串转换为数字？" class="headerlink" title="15、如何使用 Typescript 将字符串转换为数字？"></a><strong>15、如何使用 Typescript 将字符串转换为数字？</strong></h2><p>与 JavaScript 类似，你可以使用parseInt或parseFloat函数分别将字符串转换为整数或浮点数。你还可以使用一元运算符+将字符串转换为最合适的数字类型，“3”成为整数，3而“3.14”成为浮点数3.14。</p><p>var x &#x3D; “32”;var y: number &#x3D; +x;</p><h2 id="16、什么是-map-文件，为什么-x2F-如何使用它？"><a href="#16、什么是-map-文件，为什么-x2F-如何使用它？" class="headerlink" title="16、什么是 .map 文件，为什么&#x2F;如何使用它？"></a><strong>16、什么是 .map 文件，为什么&#x2F;如何使用它？</strong></h2><p>甲.map文件是源地图，显示原始打字稿代码是如何解释成可用的JavaScript代码。它们有助于简化调试，因为你可以捕获任何奇怪的编译器行为。</p><p>调试工具还可以使用这些文件来允许你编辑底层的 TypeScript 而不是发出的 JavaScript 文件。</p><h2 id="17、TypeScript-中的类是什么？你如何定义它们？"><a href="#17、TypeScript-中的类是什么？你如何定义它们？" class="headerlink" title="17、TypeScript 中的类是什么？你如何定义它们？"></a><strong>17、TypeScript 中的类是什么？你如何定义它们？</strong></h2><p>类表示一组相关对象的共享行为和属性。</p><p>例如，我们的类可能是Student，其所有对象都具有该attendClass方法。另一方面，John是一个单独的 type 实例，Student可能有额外的独特行为，比如attendExtracurricular.</p><p>你使用关键字声明类class：</p><p>class Student { studCode: number; studName: string; constructor(code: number, name: string) { this.studName &#x3D; name; this.studCode &#x3D; code; }</p><h2 id="18、TypeScript-与-JavaScript-有什么关系？"><a href="#18、TypeScript-与-JavaScript-有什么关系？" class="headerlink" title="18、TypeScript 与 JavaScript 有什么关系？"></a><strong>18、TypeScript 与 JavaScript 有什么关系？</strong></h2><p>TypeScript 是 JavaScript 的开源语法超集，可编译为 JavaScript。所有原始 JavaScript 库和语法仍然有效，但 TypeScript 增加了 JavaScript 中没有的额外语法选项和编译器功能。</p><p>TypeScript 还可以与大多数与 JavaScript 相同的技术接口，例如 Angular 和 jQuery。</p><h2 id="19、TypeScript-中的-JSX-是什么？"><a href="#19、TypeScript-中的-JSX-是什么？" class="headerlink" title="19、TypeScript 中的 JSX 是什么？"></a><strong>19、TypeScript 中的 JSX 是什么？</strong></h2><p>JSX 是一种可嵌入的类似于 XML 的语法，允许你创建 HTML。TypeScript 支持嵌入、类型检查和将 JSX 直接编译为 JavaScript。</p><h2 id="20、TypeScript-支持哪些-JSX-模式？"><a href="#20、TypeScript-支持哪些-JSX-模式？" class="headerlink" title="20、TypeScript 支持哪些 JSX 模式？"></a><strong>20、TypeScript 支持哪些 JSX 模式？</strong></h2><p>TypeScript有内置的支持preserve，react和react-native。</p><p>preserve 保持 JSX 完整以用于后续转换。</p><p>react不经过 JSX 转换，而是react.createElement作为.js文件扩展名发出和输出。</p><p>react-native结合起来preserve，react因为它维护所有 JSX 和输出作为.js扩展。</p><h2 id="21、如何编译-TypeScript-文件？"><a href="#21、如何编译-TypeScript-文件？" class="headerlink" title="21、如何编译 TypeScript 文件？"></a><strong>21、如何编译 TypeScript 文件？</strong></h2><p>你需要调用 TypeScript 编译器tsc来编译文件。你需要安装 TypeScript 编译器，你可以使用npm.</p><p>npm install -g typescripttsc <TypeScript File Name></p><h2 id="22、-TypeScript-中有哪些范围可用？这与JS相比如何？"><a href="#22、-TypeScript-中有哪些范围可用？这与JS相比如何？" class="headerlink" title="22、 TypeScript 中有哪些范围可用？这与JS相比如何？"></a><strong>22、 TypeScript 中有哪些范围可用？这与JS相比如何？</strong></h2><p>全局作用域：在任何类之外定义，可以在程序中的任何地方使用。</p><p>函数&#x2F;类范围：在函数或类中定义的变量可以在该范围内的任何地方使用。</p><p>局部作用域&#x2F;代码块：在局部作用域中定义的变量可以在该块中的任何地方使用。</p><h2 id="23、TypeScript-中的箭头-x2F-lambda-函数是什么？"><a href="#23、TypeScript-中的箭头-x2F-lambda-函数是什么？" class="headerlink" title="23、TypeScript 中的箭头&#x2F;lambda 函数是什么？"></a><strong>23、TypeScript 中的箭头&#x2F;lambda 函数是什么？</strong></h2><p>胖箭头函数是用于定义匿名函数的函数表达式的速记语法。它类似于其他语言中的 lambda 函数。箭头函数可让你跳过function关键字并编写更简洁的代码。</p><h2 id="24、解释rest参数和声明rest参数的规则。"><a href="#24、解释rest参数和声明rest参数的规则。" class="headerlink" title="24、解释rest参数和声明rest参数的规则。"></a><strong>24、解释rest参数和声明rest参数的规则。</strong></h2><p>其余参数允许你将不同数量的参数（零个或多个）传递给函数。当你不确定函数将接收多少参数时，这很有用。其余符号之后的所有参数…都将存储在一个数组中。</p><p>例如：</p><p>function Greet(greeting: string, …names: string[]) { return greeting + “ “ + names.join(“, “) + “!”;}Greet(“Hello”, “Steve”, “Bill”); &#x2F;&#x2F; returns “Hello Steve, Bill!”Greet(“Hello”);&#x2F;&#x2F; returns “Hello !”</p><p>rest 参数必须是参数定义的最后一个，并且每个函数只能有一个 rest 参数。</p><h2 id="25、什么是三斜线指令？有哪些三斜杠指令？"><a href="#25、什么是三斜线指令？有哪些三斜杠指令？" class="headerlink" title="25、什么是三斜线指令？有哪些三斜杠指令？"></a><strong>25、什么是三斜线指令？有哪些三斜杠指令？</strong></h2><p>三斜线指令是单行注释，包含用作编译器指令的 XML 标记。每个指令都表示在编译过程中要加载的内容。三斜杠指令仅在其文件的顶部工作，并且将被视为文件中其他任何地方的普通注释。</p><p>&#x2F;&#x2F;&#x2F; <reference path="..." /> 是最常见的指令，定义文件之间的依赖关系。</p><p>&#x2F;&#x2F;&#x2F; <reference types="..." />类似于path但定义了包的依赖项。</p><p>&#x2F;&#x2F;&#x2F; <reference lib="..." />允许您显式包含内置lib文件。</p><h2 id="26、Omit类型有什么作用？"><a href="#26、Omit类型有什么作用？" class="headerlink" title="26、Omit类型有什么作用？"></a><strong>26、Omit类型有什么作用？</strong></h2><p>Omit是实用程序类型的一种形式，它促进了常见的类型转换。Omit允许你通过传递电流Type并选择Keys在新类型中省略来构造类型。</p><p>Omit&lt;Type, Keys&gt;</p><p>例如：</p><p>interface Todo { title: string; description: string; completed: boolean; createdAt: number;}type TodoPreview &#x3D; Omit&lt;Todo, “description”&gt;;</p><h2 id="27、TypeScript中如何实现函数重载？"><a href="#27、TypeScript中如何实现函数重载？" class="headerlink" title="27、TypeScript中如何实现函数重载？"></a><strong>27、TypeScript中如何实现函数重载？</strong></h2><p>要在 TypeScript 中重载函数，只需创建两个名称相同但参数&#x2F;返回类型不同的函数。两个函数必须接受相同数量的参数。这是 TypeScript 中多态性的重要组成部分。</p><p>例如，你可以创建一个add函数，如果它们是数字，则将两个参数相加，如果它们是字符串，则将它们连接起来。</p><p>function add(a:string, b:string):string;function add(a:number, b:number): number;function add(a: any, b:any): any { return a + b;}add(“Hello “, “Steve”); &#x2F;&#x2F; returns “Hello Steve” add(10, 20); &#x2F;&#x2F; returns 30</p><h2 id="28、如何让接口的所有属性都可选？"><a href="#28、如何让接口的所有属性都可选？" class="headerlink" title="28、如何让接口的所有属性都可选？"></a><strong>28、如何让接口的所有属性都可选？</strong></h2><p>你可以使用partial映射类型轻松地将所有属性设为可选。</p><h2 id="29、什么时候应该使用关键字unknown？"><a href="#29、什么时候应该使用关键字unknown？" class="headerlink" title="29、什么时候应该使用关键字unknown？"></a><strong>29、什么时候应该使用关键字unknown？</strong></h2><p>unknown，如果你不知道预先期望哪种类型，但想稍后分配它，则应该使用该any关键字，并且该关键字将不起作用。</p><h2 id="30、什么是装饰器，它们可以应用于什么？"><a href="#30、什么是装饰器，它们可以应用于什么？" class="headerlink" title="30、什么是装饰器，它们可以应用于什么？"></a><strong>30、什么是装饰器，它们可以应用于什么？</strong></h2><p>装饰器是一种特殊的声明，它允许你通过使用@<name>注释标记来一次性修改类或类成员。每个装饰器都必须引用一个将在运行时评估的函数。</p><p>例如，装饰器@sealed将对应于sealed函数。任何标有 的@sealed都将用于评估sealed函数。</p><p>function sealed(target) { &#x2F;&#x2F; do something with ‘target’ …}</p><p>它们可以附加到：</p><p>类声明</p><p>方法</p><p>配件</p><p>特性</p><p>参数</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解ES6</title>
    <link href="/2023/01/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6/"/>
    <url>/2023/01/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6/</url>
    
    <content type="html"><![CDATA[<h3 id="ECMAScript简介"><a href="#ECMAScript简介" class="headerlink" title="ECMAScript简介"></a>ECMAScript简介</h3><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><p>ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和ActionScript），日常场合，这两个词是可以互换的。</p><h3 id="let和const命令"><a href="#let和const命令" class="headerlink" title="let和const命令"></a>let和const命令</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>ES6 新增了<code>let</code>和<code>const</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>和<code>const</code>命令所在的代码块内有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> j=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> k=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>var：存在变量提升，可以在声明前使用，值为<code>undefined</code>。</p><p>let：存在块级作用域，声明的变量一定要在声明过后使用，不然会报错，不可重复声明。</p><p>const：常量的值不能改变。，不可重复声明</p><p>ES5 只有两种声明变量的方法：<code>var</code>命令和<code>function</code>命令。ES6 除了添加<code>let</code>和<code>const</code>命令，还有另外两种声明变量的方法：<code>import</code>命令和<code>class</code>命令。所以，ES6 一共有 6 种声明变量的方法。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ECMAScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3的组合式API详解</title>
    <link href="/2023/01/23/Vue3%E7%9A%84%E7%BB%84%E5%90%88%E5%BC%8FAPI%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/01/23/Vue3%E7%9A%84%E7%BB%84%E5%90%88%E5%BC%8FAPI%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install <br></code></pre></td></tr></table></figure><p>文档地址：<a href="https://cn.vuejs.org/api/">API 参考 | Vue.js (vuejs.org)</a></p><p>Vue3 组合式 API（Composition API） 主要用于在大型组件中提高代码逻辑的可复用性。</p><p>传统的组件随着业务复杂度越来越高，代码量会不断的加大，整个代码逻辑都不易阅读和理解。</p><p>Vue3 使用组合式 API 的代码地方为 setup。</p><p>在 setup 中，我们可以按逻辑关注点对部分代码进行分组，然后提取逻辑片段并与其他组件共享代码。因此，组合式 API（Composition API）允许我们编写更有条理的代码。</p><p>vue3 API主要包含以下六个部分：</p><ol><li>全局API —— 全局会用到的API</li><li>组合式API —— vue3所拥有的组合式API</li><li>选项式API —— vue2所拥有的选项式API</li><li>内置内容 —— 指令、组件、特殊元素和特殊属性</li><li>单文件组件 —— 语法定义</li><li>进阶API —— 渲染函数、服务端渲染、TS工具类型和自定义渲染</li></ol><p><img src="/imgs/Vue3%E7%9A%84%E7%BB%84%E5%90%88%E5%BC%8FAPI%E8%AF%A6%E8%A7%A3/1.png"></p><h1 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h1><p>Vue3的全局API包含两个部分：应用实例和通用API。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p><img src="/imgs/Vue3%E7%9A%84%E7%BB%84%E5%90%88%E5%BC%8FAPI%E8%AF%A6%E8%A7%A3/3.jpg"></p><h2 id="通用API"><a href="#通用API" class="headerlink" title="通用API"></a>通用API</h2><p><img src="/imgs/Vue3%E7%9A%84%E7%BB%84%E5%90%88%E5%BC%8FAPI%E8%AF%A6%E8%A7%A3/4.png"></p><h1 id="组合式API"><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p><img src="/imgs/Vue3%E7%9A%84%E7%BB%84%E5%90%88%E5%BC%8FAPI%E8%AF%A6%E8%A7%A3/5.png"></p><h2 id="响应式：核心"><a href="#响应式：核心" class="headerlink" title="响应式：核心"></a>响应式：核心</h2><p><img src="/imgs/Vue3%E7%9A%84%E7%BB%84%E5%90%88%E5%BC%8FAPI%E8%AF%A6%E8%A7%A3/5.png"></p><h2 id="响应式：工具函数"><a href="#响应式：工具函数" class="headerlink" title="响应式：工具函数"></a>响应式：工具函数</h2><p>![]222222</p><h2 id="响应式：进阶"><a href="#响应式：进阶" class="headerlink" title="响应式：进阶"></a>响应式：进阶</h2><p>![22222</p><h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><p>![22222</p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p><img src="/imgs/Vue3%E7%9A%84%E7%BB%84%E5%90%88%E5%BC%8FAPI%E8%AF%A6%E8%A7%A3/5.png"></p><h1 id="选项式API"><a href="#选项式API" class="headerlink" title="选项式API"></a>选项式API</h1><h2 id="状态选项"><a href="#状态选项" class="headerlink" title="状态选项"></a>状态选项</h2><p>111</p><h2 id="渲染选项"><a href="#渲染选项" class="headerlink" title="渲染选项"></a>渲染选项</h2><p>1111</p><h2 id="生命周期选项"><a href="#生命周期选项" class="headerlink" title="生命周期选项"></a>生命周期选项</h2><p>11111</p><h2 id="组合选项"><a href="#组合选项" class="headerlink" title="组合选项"></a>组合选项</h2><p>!1111</p><h2 id="其他杂项"><a href="#其他杂项" class="headerlink" title="其他杂项"></a>其他杂项</h2><p>111</p><h2 id="组件实例"><a href="#组件实例" class="headerlink" title="组件实例"></a>组件实例</h2><p>!11111</p><h1 id="内置内容"><a href="#内置内容" class="headerlink" title="内置内容"></a>内置内容</h1><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>!11111</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>!1111</p><h2 id="特殊元素"><a href="#特殊元素" class="headerlink" title="特殊元素"></a>特殊元素</h2><p>!11111</p><h2 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h2><p>![](111111</p><h1 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h1><h2 id="SFC语法定义"><a href="#SFC语法定义" class="headerlink" title="SFC语法定义"></a>SFC语法定义</h2><p>![]1111</p><h2 id="单文件组件script-setup"><a href="#单文件组件script-setup" class="headerlink" title="单文件组件script setup"></a>单文件组件script setup</h2><p>![111111</p><h2 id="css功能"><a href="#css功能" class="headerlink" title="css功能"></a>css功能</h2><p>1111</p><h1 id="进阶API"><a href="#进阶API" class="headerlink" title="进阶API"></a>进阶API</h1><h2 id="渲染函数"><a href="#渲染函数" class="headerlink" title="渲染函数"></a>渲染函数</h2><p>1111</p><h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2><p>1111</p><h2 id="TypeScript工具类型"><a href="#TypeScript工具类型" class="headerlink" title="TypeScript工具类型"></a>TypeScript工具类型</h2><p>1111</p><h2 id="自定义渲染"><a href="#自定义渲染" class="headerlink" title="自定义渲染"></a>自定义渲染</h2><p>1111</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对包依赖管理工具的了解</title>
    <link href="/2023/01/23/%E5%AF%B9%E5%8C%85%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BA%86%E8%A7%A3/"/>
    <url>/2023/01/23/%E5%AF%B9%E5%8C%85%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BA%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>npm</tag>
      
      <tag>yarn</tag>
      
      <tag>pnpm</tag>
      
      <tag>cnpm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS面试记录</title>
    <link href="/2023/01/22/CSS%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/01/22/CSS%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="如何实现一个元素的水平垂直居中？"><a href="#如何实现一个元素的水平垂直居中？" class="headerlink" title="如何实现一个元素的水平垂直居中？"></a>如何实现一个元素的水平垂直居中？</h2><p>要求对行内元素、块状元素及不定宽高的块状元素均可适用：</p><h2 id="css3-有哪些新特性？"><a href="#css3-有哪些新特性？" class="headerlink" title="css3 有哪些新特性？"></a>css3 有哪些新特性？</h2><ul><li>rgba 和 透明度</li><li>background-image、background-origin、background-size、background-repeat</li><li>word-wrap: break-word（对长的不可分割的单词换行）</li><li>文字阴影 text-shadow</li><li>font-face属性，定义自己的字体</li><li>border-radius</li><li>边框图片 border-image</li><li>盒阴影 box-shadow</li><li>媒体查询：定义多套 css，当浏览器尺寸发生变化时采用不同的属性</li></ul><h2 id="style-标签写在-body-后与-body-前有什么区别？"><a href="#style-标签写在-body-后与-body-前有什么区别？" class="headerlink" title="style 标签写在 body 后与 body 前有什么区别？"></a>style 标签写在 body 后与 body 前有什么区别？</h2><ol><li>写在 body 标签前有利于浏览器逐步渲染： resources downloading –&gt; cssDOM + DOM –&gt; Render Tree –&gt; layout –&gt; paint</li><li>写在 body 标签后： 由于浏览器以逐行方式对 HTML 文档进行解析，当解析到写在尾部的样式表（外联或写在 style 标签）会导致浏览器停止之前的渲染，等待加载且解析样式完成后重新渲染；在 windows 的 IE 下可能出现样式失效导致的页面闪烁问题。</li></ol><h2 id="CSS选择器及优先级"><a href="#CSS选择器及优先级" class="headerlink" title="CSS选择器及优先级"></a>CSS选择器及优先级</h2><ol><li>选择器<ul><li>id选择器(#myid)</li><li>类选择器(.myclass)</li><li>属性选择器(a[rel&#x3D;”external”])</li><li>伪类选择器(a:hover, li:nth-child)</li><li>标签选择器(div, h1, p)</li><li>伪元素选择器(p::first-line)</li><li>相邻选择器（h1 + p）</li><li>子选择器(ul &gt; li)</li><li>后代选择器(li a)</li><li>通配符选择器(*)</li></ul></li><li>优先级<ul><li><code>!important</code></li><li>内联样式（1000）</li><li>ID选择器（0100）</li><li>类选择器 &#x2F; 属性选择器 &#x2F; 伪类选择器（0010）</li><li>标签选择器 &#x2F; 伪元素选择器（0001）</li><li>关系选择器 &#x2F; 通配符选择器（0000）</li></ul></li></ol><p>带 !important 标记的样式属性优先级最高；样式表的来源相同时：<code>!important &gt; 行内样式&gt; ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</code></p><h2 id="rgba-和-opacity-设置透明度的区别是什么？"><a href="#rgba-和-opacity-设置透明度的区别是什么？" class="headerlink" title="rgba() 和 opacity 设置透明度的区别是什么？"></a>rgba() 和 opacity 设置透明度的区别是什么？</h2><p>rgba() 和 opacity 都能实现透明效果，但最大的不同是 opacity 作用于元素，以及元素内的所有内容的透明度；而 rgba() 只作用于元素的颜色或其背景色，设置 rgba() 透明的元素的子元素不会继承透明效果。</p><h2 id="浏览器是如何解析-css-选择器等？"><a href="#浏览器是如何解析-css-选择器等？" class="headerlink" title="浏览器是如何解析 css 选择器等？"></a>浏览器是如何解析 css 选择器等？</h2><p><code>从右向左解析的。</code>若从左向右匹配，发现不符合规则，需要回溯，会损失很多性能。若从右向左匹配，先找到所有的最后节点，对于每一个节点，向上寻找其父节点直到查找至根元素或满足条件的匹配规则，则结束这个分支的遍历。</p><p>在 css 解析完毕后，需将解析结果 css 规则树和 DOM Tree 一起进行分析建立一颗 Render Tree，最终用来进行绘图。</p><h2 id="display-none-和-visibility-hidden-两者的区别"><a href="#display-none-和-visibility-hidden-两者的区别" class="headerlink" title="display: none 和 visibility: hidden 两者的区别"></a>display: none 和 visibility: hidden 两者的区别</h2><ol><li>display: none 隐藏后不占用文档流；而 visibility: hidden 会占用文档流。</li><li>visibility 具有继承性，给父元素设置 “visibility: hidden”，子元素也会继承该属性，但如果重新给子元素设置 “visibility: visible”，则子元素又会显示出来。</li><li>visibility: hidden 不会影响计数器的计数，虽然隐藏了，但计数器依然运行着。</li><li>在 css3 中 transition 支持 visibility 属性，但不支持 display。因为 transition 可以延迟执行，因此配合 visibility 使用纯 css 延时显示效果可以提高用户体验。</li><li>display: none 会引起回流（重排）和重绘；visibility: hidden 会引起重绘。</li></ol><h2 id="简述-transform，transition，animation-的作用"><a href="#简述-transform，transition，animation-的作用" class="headerlink" title="简述 transform，transition，animation 的作用"></a>简述 transform，transition，animation 的作用</h2><ol><li><code>transform</code>：描述了元素的静态样式，本身不会呈现动画效果，可以对元素进行旋转 rotate、扭曲 skew、缩放 scale 和移动 translate 以及矩阵变形 matrix。<code>transition</code> 和 <code>animation</code> 两者都能实现动画效果。<code>transform</code> 常配合<code>transition</code> 和 <code>animation</code> 使用。</li><li><code>transition</code>：样式过渡，从一种效果逐渐改变为另一种效果，它是一个合写属性。transition: transition-property transition-duration transition-timing-function transition-delay 从左到右，依次是：过渡效果的css属性名称、过渡效果花费时间、速度曲线、过渡开始的延迟时间 <code>transition</code> 通常和 hover 等事件配合使用，需要由事件来触发过渡。</li><li><code>animation</code>：动画，有 <code>@keyframes</code> 来描述每一帧的样式。</li></ol><p>区别：</p><ul><li><code>transform</code> 仅描述元素的静态样式，常配合<code>transition</code> 和 <code>animation</code> 使用。</li><li><code>transition</code> 通常和 hover 等事件配合使用；<code>animation</code> 是自发的，立即播放。</li><li><code>animation</code> 可以设置循环次数。</li><li><code>animation</code> 可以设置每一帧的样式和时间，<code>transition</code> 只能设置头尾。</li><li><code>transition</code> 可以与 js 配合使用， js 设定要变化的样式，<code>transition</code> 负责动画效果。</li></ul><h2 id="line-height-如何继承？"><a href="#line-height-如何继承？" class="headerlink" title="line-height 如何继承？"></a>line-height 如何继承？</h2><ul><li>父元素的 <code>line-height</code> 是具体数值，则子元素 <code>line-height</code> 继承该值。</li><li>父元素的 <code>line-height</code> 是比例值，如’2’，则子元素 <code>line-height</code> 继承该比例。</li><li>父元素的 <code>line-height</code> 是百分比，则子元素 <code>line-height</code> 继承的是父元素的 font-size * 百分比 计算出来的值。</li></ul><h2 id="如何让-chrome-支持-10px-的文字？"><a href="#如何让-chrome-支持-10px-的文字？" class="headerlink" title="如何让 chrome 支持 10px 的文字？"></a>如何让 chrome 支持 10px 的文字？</h2><ol><li>font-size: 12px; -webkit-transform: scale(0.84);</li><li>font-size: 20px; -webkit-transform: scale(0.5);</li></ol><h2 id="position-属性的值有哪些？"><a href="#position-属性的值有哪些？" class="headerlink" title="position 属性的值有哪些？"></a>position 属性的值有哪些？</h2><ol><li><code>static</code>：默认定位。元素出现在正常的文档流中（忽略top，bottom，left，right 或 z-index声明）</li><li><code>relative</code>：相对定位。如果对一个元素进行相对定位，将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，使其“相对于”它的起点进行移动。使用相对定位时，无论是否移动，元素仍然占据原来的空间；移动元素会导致其覆盖其他元素。</li><li><code>absolute</code>：绝对定位。元素的位置相对于最近的已定位的父元素，如果元素没有已定位的父元素，则相对于根元素（即 html 元素）定位。绝对定位的元素会脱离文档流，不占据空间，会与其他元素重叠。</li><li><code>fixed</code>：固定定位。元素的位置相对于浏览器窗口是固定位置，即使窗口滚动它也不会移动。固定定位的元素会脱离文档流，不占据空间，会与其他元素重叠。</li><li><code>sticky</code>：粘性定位。粘性定位可以被认为是相对定位和固定定位的混合，元素在跨越特定阈值前为相对定位，之后为固定定位。top，right，buttom，left，必须指定这四个阈值中的一个，才可以使粘性定位生效，否则行为与其相对定位相同。</li><li><code>inherit</code>：规定应该从父元素继承 position 属性的值。</li></ol><h2 id="css-盒模型？"><a href="#css-盒模型？" class="headerlink" title="css 盒模型？"></a>css 盒模型？</h2><ul><li><code>标准盒模型</code>，width 指 content 部分的宽度，总宽度 &#x3D; width + border(左右) + padding（左右）+ margin（左右）；高度同理。</li><li><code>怪异盒模型（IE盒模型）</code>，width 指 content + border（左右） + padding（左右）三部分的宽度，因此，总宽度 &#x3D; width + margin（左右）；高度同理。</li></ul><h2 id="box-sizing-属性"><a href="#box-sizing-属性" class="headerlink" title="box-sizing 属性"></a>box-sizing 属性</h2><ol><li><code>content-box</code>，对应标准盒模型。</li><li><code>border-box</code>，IE盒模型。</li><li><code>inherit</code>，继承父元素的 box-sizing 值。</li></ol><h2 id="BFC（块级格式上下文）"><a href="#BFC（块级格式上下文）" class="headerlink" title="BFC（块级格式上下文）"></a>BFC（块级格式上下文）</h2><ol><li>概念： BFC（Block Formatting Context），块级格式上下文。BFC 是 css 布局的一个概念，是一个独立的渲染区域，规定了内部 box 如何布局，且这个区域内的子元素不会影响到外面的元素。</li><li>布局规则：</li></ol><ul><li>内部的 box 会在垂直方向一个接一个的放置</li><li>box 垂直方向的距离由 margin 决定，同一个 BFC 相邻的 box 的 margin 会发生重叠</li><li>每个 box 的 margin 左边，与包含块的左 border 相接触（对于从左往右的格式化，否则相反）</li><li>BFC 的区域不会与 float box 重叠</li><li>BFC 是一个独立容器，容器内的子元素不会影响到外面的元素</li><li>计算 BFC 高度时，浮动元素也参与计算高度</li></ul><ol start="3"><li>如何创建 BFC ？</li></ol><ul><li>根元素，即 html 元素</li><li>float 值不为 none</li><li>position 值为 absolute 或 fixed</li><li>display 的值为 inline-block、tabl-cell、table-caption</li><li>overflow 的值不为 visible</li></ul><ol start="4"><li>BFC 的使用场景</li></ol><ul><li>去除边距重叠问题</li><li>清除浮动（让父元素的高度包含子浮动元素）</li><li>阻止元素被浮动元素覆盖</li></ul><h2 id="让一个元素水平-x2F-垂直居中"><a href="#让一个元素水平-x2F-垂直居中" class="headerlink" title="让一个元素水平&#x2F;垂直居中"></a>让一个元素水平&#x2F;垂直居中</h2><ol><li>水平居中</li></ol><ul><li>行内元素：<code>text-align: center;</code></li><li>对于确定宽度的块级元素<ul><li>width 和 margin 实现： <code>mragin: 0 auto;</code></li><li>绝对定位和 margin-left 实现： <code>margin-left: (父width - 子 width)/2；</code>(前提是父元素相对定位)</li></ul></li><li>对于宽度未知的块级元素<ul><li>table 标签配合 margin 左右 auto 实现</li><li>inline-block 实现：<code>display: inline-block; text-align: center;</code></li><li>绝对定位和 transform 实现， translateX 可以移动本身元素的50%</li><li>flex 布局 <code>justify-content: center</code></li></ul></li></ul><ol start="2"><li>垂直居中</li></ol><ul><li>纯文字类，设置 line-height 等于 height</li><li>子绝父相，子元素通过 margin 实现自适应居中</li><li>子绝父相，通过位移 transform 实现</li><li>flex 布局，<code>align-items: center;</code></li><li>table 布局，父级通过转换为表格形式，子级设置 vertical-align 实现</li></ul><h2 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h2><p>flex 布局，是一种弹性盒布局模型，给子元素提供了空间分布和对齐能力，由<code>container</code>（容器）及<code>item</code>（项目）组成。该布局模型提供了一种更加高效的方式来对容器中的项目进行布局、对齐和分配空间。适用于在不同尺寸的屏幕中创建可自动扩展和收缩布局，通常可用于<code>水平/垂直居中</code>，<code>两栏</code>、<code>三栏布局</code>等的场景里。</p><p>其中<code>flex</code>属性是<code>flex-grow</code>，<code>flex-shrink</code>和<code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。<strong>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。</strong></p><ul><li><p><code>flex-grow</code>：定义项目的放大比例，默认值为 0，即如果存在剩余空间，也不放大。如果所有项目的<code>flex-grow</code>属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p></li><li><p><code>flex-shrink</code>：项目的缩小比例，默认为 1，即如果空间不足，项目将缩小。如果所有项目的<code>flex-shrink</code>属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</p></li><li><p><code>flex-basis</code>：定义了在分配多余空间之前，项目占据的主轴空间。浏览器会根据该属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。当设置为 0 的是，会根据内容撑开。也可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如 350px），则项目将占据固定空间。</p></li></ul><p><code>flex</code>常用的属性值：</p><ul><li>flex: 1 –&gt; flex: 1 1 0%</li><li>flex: 2 –&gt; flex: 2 1 0%</li><li>flex: auto –&gt; flex: 1 1 auto</li><li>flex: none –&gt; flex: 0 0 auto【常用于固定尺寸不伸缩】</li></ul><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><ol><li>直接把 <code>&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;</code>作为最后一个子标签<ul><li>优点：通俗易懂，容易掌握；</li><li>缺点：会添加较多无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦</li></ul></li><li>.clearfix { overflow: hidden; zoom: 1; }<ul><li>优点：不存在结构和语义化问题，代码量极少</li><li>缺点：内容增多时容易造成不自动换行，导致内容被隐藏掉，无法显示需要溢出的元素</li></ul></li><li>建立伪类选择器</li></ol><p><img src="/../imgs/CSS%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/98e2353e3275475095bd26ecedfa32e9tplv-k3u1fbpfcp-zoom-in-crop-mark4536000.webp" alt="image.png"></p><h2 id="css-中优雅降级和渐进增强有什么区别？"><a href="#css-中优雅降级和渐进增强有什么区别？" class="headerlink" title="css 中优雅降级和渐进增强有什么区别？"></a>css 中优雅降级和渐进增强有什么区别？</h2><p>优雅降级和渐进增强是随着 css3 流出来的一个概念。由于低级浏览器不支持 css3， 但 css3 的效果又很优秀不忍放弃，所以在高级浏览器中使用 css3 ，而在低级浏览器只保证最基本的功能。二者最关键的区别是它们所侧重的内容，以及这种不同所造成的工作流程的差异。</p><ul><li><code>优雅降级</code>：一开始就构建完整的功能，然后针对浏览器测试和修复。</li><li><code>渐进增强</code>：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能以达到更好的体验。</li></ul><h2 id="img-的-alt-和-title-的异同？实现图片懒加载的原理？"><a href="#img-的-alt-和-title-的异同？实现图片懒加载的原理？" class="headerlink" title="img 的 alt 和 title 的异同？实现图片懒加载的原理？"></a>img 的 alt 和 title 的异同？实现图片懒加载的原理？</h2><ul><li><code>alt</code>是图片加载失败时显示在网页上的替代文字；<code>title</code>是鼠标放在图片上面时显示的文字，是对图片的进一步描述和说明。</li><li><code>alt</code>是 img 的必要属性；<code>title</code>不是。</li><li>对于网站 SEO 优先来说，搜索引擎对图片意思的判断，主要是靠<code>alt</code>属性，所以在图片<code>alt</code>属性中以简要文字说明，同时包含关键字，也是页面优化的一部分。</li></ul><p><code>懒加载原理</code>：先设置图片的 <code>data-set</code> 属性值（也可以是其他任意的，只要不发生 http 请求就可以，作用是为了存取值）为图片路径，由于不是 <code>src</code> 属性，故不会发生 http 请求。然后计算出页面的 scrollTop 的高度和浏览器的高度之和，如果图片距页面顶端距离小于前两者之和，说明图片要显示出来了，这时将 <code>data-set</code> 属性替换为 <code>src</code> 属性即可。</p><h2 id="css-sprites-（雪碧图-x2F-精灵图）"><a href="#css-sprites-（雪碧图-x2F-精灵图）" class="headerlink" title="css sprites （雪碧图&#x2F;精灵图）"></a>css sprites （雪碧图&#x2F;精灵图）</h2><p>css sprites 就是把网页中一些小图片整合到一张图片文件中，再利用 css 的 background-image、background-repeat、background-position 的组合进行背景定位。</p><p>优点： 减少图片体积；减少 http 请求次数</p><p>缺点：维护比较麻烦；不能随便改变大小，会失真模糊</p><h2 id="什么是字体图标？"><a href="#什么是字体图标？" class="headerlink" title="什么是字体图标？"></a>什么是字体图标？</h2><p>字体图标简单的说，就是一种特殊的字体，通过这种字体，显示给用户的就像一个个图片一样。字体图标最大的好处，在于它不会变形和加载速度快。字体图标可以像文字一样，随意通过 css 来控制它的大小和颜色，非常方便。</p><h2 id="主流浏览器内核私有属性-css-前缀？"><a href="#主流浏览器内核私有属性-css-前缀？" class="headerlink" title="主流浏览器内核私有属性 css 前缀？"></a>主流浏览器内核私有属性 css 前缀？</h2><ul><li>mozilla(firefox、flock等): -moz</li><li>webkit 内核(safari、chrome等): -webkit</li><li>opera 内核(opera浏览器): -o</li><li>trident 内核(ie 浏览器): -ms</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML面试记录</title>
    <link href="/2023/01/22/HTML%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/01/22/HTML%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h2><ol><li>语义化，指对文本内容的结构化（内容语义化），选择合乎语义的标签（代码语义化）。</li><li>语义化标签：<code>header</code>、<code>nav</code>、<code>main</code>、<code>article</code>、<code>section</code>、<code>aside</code>、<code>footer</code>等。</li><li>优点：<ul><li>代码结构清晰，易于阅读，有利于维护</li><li>方便其他设备解析（如：屏幕阅读器）</li><li>有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重</li></ul></li></ol><p>建议阅读文章：<a href="https://link.juejin.cn/?target=https://rainylog.com/post/ife-note-1/" title="https://rainylog.com/post/ife-note-1/">百度ife的h5语义化文章</a></p><p><a href="https://zhuanlan.zhihu.com/p/32570423">初探 · HTML5语义化</a></p><h2 id="script-标签中属性-async-和-defer-的区别？"><a href="#script-标签中属性-async-和-defer-的区别？" class="headerlink" title="script 标签中属性 async 和 defer 的区别？"></a>script 标签中属性 async 和 defer 的区别？</h2><ul><li><code>script</code> 会阻碍 HTML 解析，只有下载好并执行完脚本才会继续解析 HTML</li><li><code>async script</code>：解析 HTML 的过程中会进行脚本的异步下载，下载成功后立马执行，因此有可能会阻断 HTML 的解析。多个脚本的执行顺序无法保证。</li><li><code>defer script</code>：也是异步下载脚步，加载完成后，如果此时 HTML 还没有解析完，浏览器不会暂停解析去执行 JS 代码，而是等待 HTML 解析完毕再执行 JS 代码，如果存在多个 <code>defer script</code> 标签，浏览器（IE9及以下除外）会保证它们按照在 HTML 中出现的顺序执行，不会破坏 JS 脚本之间的依赖关系。</li></ul><p>建议阅读文章：<a href="https://juejin.cn/post/6894629999215640583" title="https://juejin.cn/post/6894629999215640583">图解 script 标签中的 async 和 defer 属性</a></p><h2 id="DOCTYPE-的作用是什么？"><a href="#DOCTYPE-的作用是什么？" class="headerlink" title="DOCTYPE 的作用是什么？"></a>DOCTYPE 的作用是什么？</h2><p><code>&lt;!DOCTYE&gt;</code> 声明一般位于文档的第一行，它的作用主要是告诉浏览器以什么样的模式来解析文档。一般指定了之后会以“标准模式”进行文档解析，否则就以“兼容模式”进行解析。</p><ul><li>在<code>标准模式</code>下，浏览器的解析规则都是按照最新的标准进行解析的。</li><li>而在<code>兼容模式</code>下，浏览器会以向后兼容的方式来模拟老式浏览器的行为，以保证一些老的网站能正常访问。</li></ul><h2 id="SGML、HTML、XML-和-XHTML的区别"><a href="#SGML、HTML、XML-和-XHTML的区别" class="headerlink" title="SGML、HTML、XML 和 XHTML的区别"></a>SGML、HTML、XML 和 XHTML的区别</h2><ul><li><code>SGML</code> 是标准通用标记语言，是一种定义电子文档结构和描述其内容的国际标准语言，是所有电子文档标记语言的起源。</li><li><code>HTML</code> 是超文本标记语言，主要是用于规定怎样显示网页。</li><li><code>XML</code> 是可扩展标记语言，是未来网页语言的发展方向，XML 和 HTML 的最大区别就在于 XML 的标签是可以自己创建的，数量无限多，而 HTML 的标签都是固定的而且数量有限。</li><li><code>XHTML</code> 也是现在基本上所有网页都在用的标记语言，他其实和 HTML 没什么本质的区别，标签都一样，用法也都一样，就是比 HTML 更严格，比如标签必须都用小写，标签都必须有闭合标签等。</li></ul><h2 id="HTML5-有哪些新特性、移除了哪些元素？"><a href="#HTML5-有哪些新特性、移除了哪些元素？" class="headerlink" title="HTML5 有哪些新特性、移除了哪些元素？"></a>HTML5 有哪些新特性、移除了哪些元素？</h2><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像、位置、存储、多任务等功能的增加。</p><p>新增的：</p><ul><li>绘图 <code>canvas</code></li><li>用于媒介回放的 <code>video</code> 和 <code>audio</code> 元素</li><li>本地离线存储 <code>localStorage</code> 、<code>sessionStorage</code></li><li>语义化更好的内容元素，如：<code>header</code>、<code>article</code>、<code>nav</code>、<code>section</code>、<code>footer</code>等</li><li>表单控件 <code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code> 等</li><li>新的技术 <code>webworker</code>、<code>websocket</code></li><li>新的文档属性 <code>document.visibilityState</code></li></ul><p>移除的：</p><ul><li>纯表现的元素：<code>basefont</code>、<code>big</code>、<code>center</code>、<code>s</code>、<code>tt</code>、<code>u</code></li><li>对可用性产生负面影响的元素：<code>frame</code>、<code>frameset</code>、<code>noframes</code></li></ul><h2 id="对浏览器内核的理解"><a href="#对浏览器内核的理解" class="headerlink" title="对浏览器内核的理解"></a>对浏览器内核的理解</h2><p>主要分为两部分：渲染引擎和JS引擎。</p><ul><li><code>渲染引擎</code>：其职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 HTML、 XML 文档及图片，它也可以借助一些浏览器扩展插件显示其他类型数据，如：使用PDF阅读器插件可以显示 PDF 格式。</li><li><code>JS引擎</code>：解析和执行 JavaScript 来实现网页的动态效果。</li></ul><p>最开始渲染引擎和JS引擎并没有区分的很明显，后来JS引擎越来越独立，内核就倾向于只指渲染引擎了。</p><h2 id="什么是文档的预解析？"><a href="#什么是文档的预解析？" class="headerlink" title="什么是文档的预解析？"></a>什么是文档的预解析？</h2><p>当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载，从而使整体速度更快。</p><p>需要注意的是，预解析并不改变DOM树，它将这个工作交给主解析过程，自己只解析外部资源的引用，比如：外部脚本、样式及图片。</p><h2 id="浏览器的渲染原理"><a href="#浏览器的渲染原理" class="headerlink" title="浏览器的渲染原理"></a>浏览器的渲染原理</h2><p>简记： 生成DOM树 –&gt; 生成CSS规则树 –&gt; 构建渲染树 –&gt; 布局 –&gt; 绘制</p><ol><li>首先解析收到的文档，根据文档定义构建一颗 <code>DOM 树</code>，DOM 树是由 DOM 元素及属性节点组成的。</li><li>然后对 CSS 进行解析，生成一颗 <code>CSS 规则树</code>。</li><li>根据 DOM 树和 CSS 规则树构建<code>渲染树</code>。渲染树的节点被称为渲染对象，它是一个包含有颜色等属性的矩形。渲染对象和 DOM 元素相对应，但这种关系不是一对一的，不可见的 DOM 元素不会插入渲染树。还有一些 DOM 元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。</li><li>当渲染对象被创建并添加到树中，它们没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行<code>布局</code>（也可以叫做回流）。这一阶段浏览器要做的是计算出各个节点在页面中确切位置和大小。通常这一行为也被称为自动重排。</li><li>布局阶段结束后是<code>绘制</code>阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示到屏幕上。值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎会尽早的将内容呈现到屏幕上，并不会等到所有 HMTL 内容都解析完之后再去构建和布局渲染树，它是解析完一部分内容就显示一部分内容，同时，可能还通过网络下载其余内容。</li></ol><h2 id="什么是回流和重绘？"><a href="#什么是回流和重绘？" class="headerlink" title="什么是回流和重绘？"></a>什么是回流和重绘？</h2><p>1.概念：</p><ul><li><code>回流</code>：当 DOM 的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做回流（也可以叫做重排）。表现为重新生成布局，重新排列元素。</li><li><code>重绘</code>：当一个元素的外观发生改变，重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变。</li></ul><p>2.常见引起回流和重绘的属性和方法：</p><p>任何会改变元素几何信息（元素的位置和尺寸大小）的操作都会触发回流。</p><ul><li>添加或删除可见的 DOM 元素</li><li>元素尺寸改变–边距、填充、宽度、高度</li><li>浏览器尺寸改变– resize 事件发生时</li><li>计算 offsetWidth 和 offsetHeight 属性</li><li>设置 style 属性的值</li><li>修改网页默认字体</li></ul><p><strong>回流必定会发生重绘，重绘不一定会引发回流。</strong></p><p><strong>回流所需的成本比重绘高得多</strong></p><p>建议阅读文章：<a href="https://juejin.cn/post/6844903779700047885" title="https://juejin.cn/post/6844903779700047885">你真的了解回流和重绘吗</a></p><h2 id="如何减少回流？"><a href="#如何减少回流？" class="headerlink" title="如何减少回流？"></a>如何减少回流？</h2><ul><li>使用 transform 代替 top</li><li>不要把节点的属性值放在一个循环里，当成循环里的变量</li><li>不要使用 table 布局，可能很小的一个改动会造成整个 table 的重新布局</li><li>把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM</li><li>不要一条一条的修改样式，可以预先定义好 class，然后修改 DOM 的 className</li><li>使用 absolute 或 fixed 使元素脱离文档流</li></ul><h2 id="sessionStorage，localStorage-和-cookie-的区别"><a href="#sessionStorage，localStorage-和-cookie-的区别" class="headerlink" title="sessionStorage，localStorage 和 cookie 的区别"></a>sessionStorage，localStorage 和 cookie 的区别</h2><ol><li>共同点：都是保存在浏览器端，且同源的</li><li>区别:</li></ol><ul><li>cookie 始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器之间来回传递；而 sessionStorage 和 localStorage 不会自动把数据发送到服务器，仅在本地保存。cookie 还有路径（path）的概念，可以限制 cookie 只属于某个路径下。</li><li>存储大小限制不同。cookie 不能超过 4K，因为每次 http 请求都会携带 cookie，所以 cookie 只适合保存很小的数据，如：会话标识。sessionStorage 和 localStorage 虽然也有存储大小限制，但比 cookie 大得多，可以达到 5M 或更大。</li><li>数据有效期不同。sessionStorage 仅在当前浏览器窗口关闭之前有效；localStorage 始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie 只在设置的 cookie 过期时间之前有效。</li><li>作用域不同。sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 和 cookie 在所有同源窗口中都是共享的。</li></ul><h2 id="iframe-有哪些优缺点？"><a href="#iframe-有哪些优缺点？" class="headerlink" title="iframe 有哪些优缺点？"></a>iframe 有哪些优缺点？</h2><p>优点：</p><ol><li>iframe 能原封不动的把嵌入的网页展现出来。</li><li>如果有多个网页引用 iframe，只需修改 iframe 的内容，就可以实现调用每一个页面的更改，方便快捷。</li></ol><p>缺点：</p><ol><li>iframe 会阻塞主页面的 onload 事件。</li><li>iframe 和主页面共享链接池，而浏览器对相同域的链接有限制，所以会影响页面的并行加载。</li><li>不利于 SEO，代码复杂，无法一下被搜索引擎索引到。</li><li>iframe 框架页面会增加服务器的 http 请求，对于大型网站不可取。</li><li>很多移动设备无法完全显示框架，设备兼容性差。</li></ol><p>注意：通过动态给 iframe 添加 src 属性值，可解决前两个问题。</p><h2 id="什么是-canvas，基本用法是什么？"><a href="#什么是-canvas，基本用法是什么？" class="headerlink" title="什么是 canvas，基本用法是什么？"></a>什么是 canvas，基本用法是什么？</h2><p>canvas 元素是 HTML5 的一部分，允许脚步语言动态渲染位图像。canvas 由一个可控制区域 HTML 代码中的属性定义决定高度和宽度。JavaScript 代码可以访问该区域，通过一套完整的绘图功能类似于其他通用二维的 API，从而生成动态的图形。</p><ol><li>创建 canvas 标签</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;canvas <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;myCanvas&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;150&quot;</span> <span class="hljs-attribute">height</span>=<span class="hljs-string">&quot;150&quot;</span>&gt;该浏览器不支持canvas&lt;/canvas&gt;<br>复制代码<br></code></pre></td></tr></table></figure><ol start="2"><li>渲染上下文</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;myCanvas&#x27;</span>);<br><span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>复制代码<br></code></pre></td></tr></table></figure><p>代码第一行通过使用 <code>document.getElementById()</code> 方法获取 <code>&lt;canvas&gt;</code> 元素对应的 DOM 对象，然后可以通过使用它的 <code>getContext()</code> 方法来绘制上下文。 创建 canvas 标签时可以在标签内写上不支持的提示信息；也可以通过 <code>getContext()</code> 方法判读是否支持编程。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;myCanvas&#x27;</span>);<br><span class="hljs-keyword">if</span> (canvas.getContext) &#123;<br>  <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>  <span class="hljs-comment">// other code</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// 不支持 canvas 的其他代码</span><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>用途：</p><p>canvas 可用于游戏和图表（echarts.js、heightchart.js 都是基于 canvas 来绘图）制作。</p>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo创建博客</title>
    <link href="/2023/01/22/hexo%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/01/22/hexo%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo部署博客的命令"><a href="#hexo部署博客的命令" class="headerlink" title="hexo部署博客的命令"></a>hexo部署博客的命令</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
